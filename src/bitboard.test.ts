import {
  Bitboard,
  bitwiseAnd,
  bitwiseOr,
  bitwiseXor,
  getBottomSquare,
  getLeftSquare,
  getRightSquare,
  getTopSquare,
  isNull,
} from "./bitboard";

describe("getLeftSquare", () => {
  const cases: [string, Bitboard, Bitboard][] = [
    ["null", [0x00000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 1, file H", [0x00000000, 0x00000001], [0x00000000, 0x00000002]],
    ["rank 1, file G", [0x00000000, 0x00000002], [0x00000000, 0x00000004]],
    ["rank 1, file F", [0x00000000, 0x00000004], [0x00000000, 0x00000008]],
    ["rank 1, file E", [0x00000000, 0x00000008], [0x00000000, 0x00000010]],
    ["rank 1, file D", [0x00000000, 0x00000010], [0x00000000, 0x00000020]],
    ["rank 1, file C", [0x00000000, 0x00000020], [0x00000000, 0x00000040]],
    ["rank 1, file B", [0x00000000, 0x00000040], [0x00000000, 0x00000080]],
    ["rank 1, file A", [0x00000000, 0x00000080], [0x00000000, 0x00000000]],
    ["rank 2, file H", [0x00000000, 0x00000100], [0x00000000, 0x00000200]],
    ["rank 2, file G", [0x00000000, 0x00000200], [0x00000000, 0x00000400]],
    ["rank 2, file F", [0x00000000, 0x00000400], [0x00000000, 0x00000800]],
    ["rank 2, file E", [0x00000000, 0x00000800], [0x00000000, 0x00001000]],
    ["rank 2, file D", [0x00000000, 0x00001000], [0x00000000, 0x00002000]],
    ["rank 2, file C", [0x00000000, 0x00002000], [0x00000000, 0x00004000]],
    ["rank 2, file B", [0x00000000, 0x00004000], [0x00000000, 0x00008000]],
    ["rank 2, file A", [0x00000000, 0x00008000], [0x00000000, 0x00000000]],
    ["rank 3, file H", [0x00000000, 0x00010000], [0x00000000, 0x00020000]],
    ["rank 3, file G", [0x00000000, 0x00020000], [0x00000000, 0x00040000]],
    ["rank 3, file F", [0x00000000, 0x00040000], [0x00000000, 0x00080000]],
    ["rank 3, file E", [0x00000000, 0x00080000], [0x00000000, 0x00100000]],
    ["rank 3, file D", [0x00000000, 0x00100000], [0x00000000, 0x00200000]],
    ["rank 3, file C", [0x00000000, 0x00200000], [0x00000000, 0x00400000]],
    ["rank 3, file B", [0x00000000, 0x00400000], [0x00000000, 0x00800000]],
    ["rank 3, file A", [0x00000000, 0x00800000], [0x00000000, 0x00000000]],
    ["rank 4, file H", [0x00000000, 0x01000000], [0x00000000, 0x02000000]],
    ["rank 4, file G", [0x00000000, 0x02000000], [0x00000000, 0x04000000]],
    ["rank 4, file F", [0x00000000, 0x04000000], [0x00000000, 0x08000000]],
    ["rank 4, file E", [0x00000000, 0x08000000], [0x00000000, 0x10000000]],
    ["rank 4, file D", [0x00000000, 0x10000000], [0x00000000, 0x20000000]],
    ["rank 4, file C", [0x00000000, 0x20000000], [0x00000000, 0x40000000]],
    ["rank 4, file B", [0x00000000, 0x40000000], [0x00000000, 0x80000000]],
    ["rank 4, file A", [0x00000000, 0x80000000], [0x00000000, 0x00000000]],
    ["rank 5, file H", [0x00000001, 0x00000000], [0x00000002, 0x00000000]],
    ["rank 5, file G", [0x00000002, 0x00000000], [0x00000004, 0x00000000]],
    ["rank 5, file F", [0x00000004, 0x00000000], [0x00000008, 0x00000000]],
    ["rank 5, file E", [0x00000008, 0x00000000], [0x00000010, 0x00000000]],
    ["rank 5, file D", [0x00000010, 0x00000000], [0x00000020, 0x00000000]],
    ["rank 5, file C", [0x00000020, 0x00000000], [0x00000040, 0x00000000]],
    ["rank 5, file B", [0x00000040, 0x00000000], [0x00000080, 0x00000000]],
    ["rank 5, file A", [0x00000080, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 6, file H", [0x00000100, 0x00000000], [0x00000200, 0x00000000]],
    ["rank 6, file G", [0x00000200, 0x00000000], [0x00000400, 0x00000000]],
    ["rank 6, file F", [0x00000400, 0x00000000], [0x00000800, 0x00000000]],
    ["rank 6, file E", [0x00000800, 0x00000000], [0x00001000, 0x00000000]],
    ["rank 6, file D", [0x00001000, 0x00000000], [0x00002000, 0x00000000]],
    ["rank 6, file C", [0x00002000, 0x00000000], [0x00004000, 0x00000000]],
    ["rank 6, file B", [0x00004000, 0x00000000], [0x00008000, 0x00000000]],
    ["rank 6, file A", [0x00008000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 7, file H", [0x00010000, 0x00000000], [0x00020000, 0x00000000]],
    ["rank 7, file G", [0x00020000, 0x00000000], [0x00040000, 0x00000000]],
    ["rank 7, file F", [0x00040000, 0x00000000], [0x00080000, 0x00000000]],
    ["rank 7, file E", [0x00080000, 0x00000000], [0x00100000, 0x00000000]],
    ["rank 7, file D", [0x00100000, 0x00000000], [0x00200000, 0x00000000]],
    ["rank 7, file C", [0x00200000, 0x00000000], [0x00400000, 0x00000000]],
    ["rank 7, file B", [0x00400000, 0x00000000], [0x00800000, 0x00000000]],
    ["rank 7, file A", [0x00800000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file H", [0x01000000, 0x00000000], [0x02000000, 0x00000000]],
    ["rank 8, file G", [0x02000000, 0x00000000], [0x04000000, 0x00000000]],
    ["rank 8, file F", [0x04000000, 0x00000000], [0x08000000, 0x00000000]],
    ["rank 8, file E", [0x08000000, 0x00000000], [0x10000000, 0x00000000]],
    ["rank 8, file D", [0x10000000, 0x00000000], [0x20000000, 0x00000000]],
    ["rank 8, file C", [0x20000000, 0x00000000], [0x40000000, 0x00000000]],
    ["rank 8, file B", [0x40000000, 0x00000000], [0x80000000, 0x00000000]],
    ["rank 8, file A", [0x80000000, 0x00000000], [0x00000000, 0x00000000]],
    ["everything", [0xffffffff, 0xffffffff], [0xfefefefe, 0xfefefefe]],
  ];
  it.each(cases)("%s", (_, input, output) => {
    expect(getLeftSquare(input)).toEqual(output);
  });
});

describe("getRightSquare", () => {
  const cases: [string, Bitboard, Bitboard][] = [
    ["null", [0x00000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 1, file H", [0x00000000, 0x00000001], [0x00000000, 0x00000000]],
    ["rank 1, file G", [0x00000000, 0x00000002], [0x00000000, 0x00000001]],
    ["rank 1, file F", [0x00000000, 0x00000004], [0x00000000, 0x00000002]],
    ["rank 1, file E", [0x00000000, 0x00000008], [0x00000000, 0x00000004]],
    ["rank 1, file D", [0x00000000, 0x00000010], [0x00000000, 0x00000008]],
    ["rank 1, file C", [0x00000000, 0x00000020], [0x00000000, 0x00000010]],
    ["rank 1, file B", [0x00000000, 0x00000040], [0x00000000, 0x00000020]],
    ["rank 1, file A", [0x00000000, 0x00000080], [0x00000000, 0x00000040]],
    ["rank 2, file H", [0x00000000, 0x00000100], [0x00000000, 0x00000000]],
    ["rank 2, file G", [0x00000000, 0x00000200], [0x00000000, 0x00000100]],
    ["rank 2, file F", [0x00000000, 0x00000400], [0x00000000, 0x00000200]],
    ["rank 2, file E", [0x00000000, 0x00000800], [0x00000000, 0x00000400]],
    ["rank 2, file D", [0x00000000, 0x00001000], [0x00000000, 0x00000800]],
    ["rank 2, file C", [0x00000000, 0x00002000], [0x00000000, 0x00001000]],
    ["rank 2, file B", [0x00000000, 0x00004000], [0x00000000, 0x00002000]],
    ["rank 2, file A", [0x00000000, 0x00008000], [0x00000000, 0x00004000]],
    ["rank 3, file H", [0x00000000, 0x00010000], [0x00000000, 0x00000000]],
    ["rank 3, file G", [0x00000000, 0x00020000], [0x00000000, 0x00010000]],
    ["rank 3, file F", [0x00000000, 0x00040000], [0x00000000, 0x00020000]],
    ["rank 3, file E", [0x00000000, 0x00080000], [0x00000000, 0x00040000]],
    ["rank 3, file D", [0x00000000, 0x00100000], [0x00000000, 0x00080000]],
    ["rank 3, file C", [0x00000000, 0x00200000], [0x00000000, 0x00100000]],
    ["rank 3, file B", [0x00000000, 0x00400000], [0x00000000, 0x00200000]],
    ["rank 3, file A", [0x00000000, 0x00800000], [0x00000000, 0x00400000]],
    ["rank 4, file H", [0x00000000, 0x01000000], [0x00000000, 0x00000000]],
    ["rank 4, file G", [0x00000000, 0x02000000], [0x00000000, 0x01000000]],
    ["rank 4, file F", [0x00000000, 0x04000000], [0x00000000, 0x02000000]],
    ["rank 4, file E", [0x00000000, 0x08000000], [0x00000000, 0x04000000]],
    ["rank 4, file D", [0x00000000, 0x10000000], [0x00000000, 0x08000000]],
    ["rank 4, file C", [0x00000000, 0x20000000], [0x00000000, 0x10000000]],
    ["rank 4, file B", [0x00000000, 0x40000000], [0x00000000, 0x20000000]],
    ["rank 4, file A", [0x00000000, 0x80000000], [0x00000000, 0x40000000]],
    ["rank 5, file H", [0x00000001, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 5, file G", [0x00000002, 0x00000000], [0x00000001, 0x00000000]],
    ["rank 5, file F", [0x00000004, 0x00000000], [0x00000002, 0x00000000]],
    ["rank 5, file E", [0x00000008, 0x00000000], [0x00000004, 0x00000000]],
    ["rank 5, file D", [0x00000010, 0x00000000], [0x00000008, 0x00000000]],
    ["rank 5, file C", [0x00000020, 0x00000000], [0x00000010, 0x00000000]],
    ["rank 5, file B", [0x00000040, 0x00000000], [0x00000020, 0x00000000]],
    ["rank 5, file A", [0x00000080, 0x00000000], [0x00000040, 0x00000000]],
    ["rank 6, file H", [0x00000100, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 6, file G", [0x00000200, 0x00000000], [0x00000100, 0x00000000]],
    ["rank 6, file F", [0x00000400, 0x00000000], [0x00000200, 0x00000000]],
    ["rank 6, file E", [0x00000800, 0x00000000], [0x00000400, 0x00000000]],
    ["rank 6, file D", [0x00001000, 0x00000000], [0x00000800, 0x00000000]],
    ["rank 6, file C", [0x00002000, 0x00000000], [0x00001000, 0x00000000]],
    ["rank 6, file B", [0x00004000, 0x00000000], [0x00002000, 0x00000000]],
    ["rank 6, file A", [0x00008000, 0x00000000], [0x00004000, 0x00000000]],
    ["rank 7, file H", [0x00010000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 7, file G", [0x00020000, 0x00000000], [0x00010000, 0x00000000]],
    ["rank 7, file F", [0x00040000, 0x00000000], [0x00020000, 0x00000000]],
    ["rank 7, file E", [0x00080000, 0x00000000], [0x00040000, 0x00000000]],
    ["rank 7, file D", [0x00100000, 0x00000000], [0x00080000, 0x00000000]],
    ["rank 7, file C", [0x00200000, 0x00000000], [0x00100000, 0x00000000]],
    ["rank 7, file B", [0x00400000, 0x00000000], [0x00200000, 0x00000000]],
    ["rank 7, file A", [0x00800000, 0x00000000], [0x00400000, 0x00000000]],
    ["rank 8, file H", [0x01000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file G", [0x02000000, 0x00000000], [0x01000000, 0x00000000]],
    ["rank 8, file F", [0x04000000, 0x00000000], [0x02000000, 0x00000000]],
    ["rank 8, file E", [0x08000000, 0x00000000], [0x04000000, 0x00000000]],
    ["rank 8, file D", [0x10000000, 0x00000000], [0x08000000, 0x00000000]],
    ["rank 8, file C", [0x20000000, 0x00000000], [0x10000000, 0x00000000]],
    ["rank 8, file B", [0x40000000, 0x00000000], [0x20000000, 0x00000000]],
    ["rank 8, file A", [0x80000000, 0x00000000], [0x40000000, 0x00000000]],
    ["everything", [0xffffffff, 0xffffffff], [0x7f7f7f7f, 0x7f7f7f7f]],
  ];
  it.each(cases)("%s", (_, input, output) => {
    expect(getRightSquare(input)).toEqual(output);
  });
});

describe("getTopSquare", () => {
  const cases: [string, Bitboard, Bitboard][] = [
    ["null", [0x00000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 1, file H", [0x00000000, 0x00000001], [0x00000000, 0x00000100]],
    ["rank 1, file G", [0x00000000, 0x00000002], [0x00000000, 0x00000200]],
    ["rank 1, file F", [0x00000000, 0x00000004], [0x00000000, 0x00000400]],
    ["rank 1, file E", [0x00000000, 0x00000008], [0x00000000, 0x00000800]],
    ["rank 1, file D", [0x00000000, 0x00000010], [0x00000000, 0x00001000]],
    ["rank 1, file C", [0x00000000, 0x00000020], [0x00000000, 0x00002000]],
    ["rank 1, file B", [0x00000000, 0x00000040], [0x00000000, 0x00004000]],
    ["rank 1, file A", [0x00000000, 0x00000080], [0x00000000, 0x00008000]],
    ["rank 2, file H", [0x00000000, 0x00000100], [0x00000000, 0x00010000]],
    ["rank 2, file G", [0x00000000, 0x00000200], [0x00000000, 0x00020000]],
    ["rank 2, file F", [0x00000000, 0x00000400], [0x00000000, 0x00040000]],
    ["rank 2, file E", [0x00000000, 0x00000800], [0x00000000, 0x00080000]],
    ["rank 2, file D", [0x00000000, 0x00001000], [0x00000000, 0x00100000]],
    ["rank 2, file C", [0x00000000, 0x00002000], [0x00000000, 0x00200000]],
    ["rank 2, file B", [0x00000000, 0x00004000], [0x00000000, 0x00400000]],
    ["rank 2, file A", [0x00000000, 0x00008000], [0x00000000, 0x00800000]],
    ["rank 3, file H", [0x00000000, 0x00010000], [0x00000000, 0x01000000]],
    ["rank 3, file G", [0x00000000, 0x00020000], [0x00000000, 0x02000000]],
    ["rank 3, file F", [0x00000000, 0x00040000], [0x00000000, 0x04000000]],
    ["rank 3, file E", [0x00000000, 0x00080000], [0x00000000, 0x08000000]],
    ["rank 3, file D", [0x00000000, 0x00100000], [0x00000000, 0x10000000]],
    ["rank 3, file C", [0x00000000, 0x00200000], [0x00000000, 0x20000000]],
    ["rank 3, file B", [0x00000000, 0x00400000], [0x00000000, 0x40000000]],
    ["rank 3, file A", [0x00000000, 0x00800000], [0x00000000, 0x80000000]],
    ["rank 4, file H", [0x00000000, 0x01000000], [0x00000001, 0x00000000]],
    ["rank 4, file G", [0x00000000, 0x02000000], [0x00000002, 0x00000000]],
    ["rank 4, file F", [0x00000000, 0x04000000], [0x00000004, 0x00000000]],
    ["rank 4, file E", [0x00000000, 0x08000000], [0x00000008, 0x00000000]],
    ["rank 4, file D", [0x00000000, 0x10000000], [0x00000010, 0x00000000]],
    ["rank 4, file C", [0x00000000, 0x20000000], [0x00000020, 0x00000000]],
    ["rank 4, file B", [0x00000000, 0x40000000], [0x00000040, 0x00000000]],
    ["rank 4, file A", [0x00000000, 0x80000000], [0x00000080, 0x00000000]],
    ["rank 5, file H", [0x00000001, 0x00000000], [0x00000100, 0x00000000]],
    ["rank 5, file G", [0x00000002, 0x00000000], [0x00000200, 0x00000000]],
    ["rank 5, file F", [0x00000004, 0x00000000], [0x00000400, 0x00000000]],
    ["rank 5, file E", [0x00000008, 0x00000000], [0x00000800, 0x00000000]],
    ["rank 5, file D", [0x00000010, 0x00000000], [0x00001000, 0x00000000]],
    ["rank 5, file C", [0x00000020, 0x00000000], [0x00002000, 0x00000000]],
    ["rank 5, file B", [0x00000040, 0x00000000], [0x00004000, 0x00000000]],
    ["rank 5, file A", [0x00000080, 0x00000000], [0x00008000, 0x00000000]],
    ["rank 6, file H", [0x00000100, 0x00000000], [0x00010000, 0x00000000]],
    ["rank 6, file G", [0x00000200, 0x00000000], [0x00020000, 0x00000000]],
    ["rank 6, file F", [0x00000400, 0x00000000], [0x00040000, 0x00000000]],
    ["rank 6, file E", [0x00000800, 0x00000000], [0x00080000, 0x00000000]],
    ["rank 6, file D", [0x00001000, 0x00000000], [0x00100000, 0x00000000]],
    ["rank 6, file C", [0x00002000, 0x00000000], [0x00200000, 0x00000000]],
    ["rank 6, file B", [0x00004000, 0x00000000], [0x00400000, 0x00000000]],
    ["rank 6, file A", [0x00008000, 0x00000000], [0x00800000, 0x00000000]],
    ["rank 7, file H", [0x00010000, 0x00000000], [0x01000000, 0x00000000]],
    ["rank 7, file G", [0x00020000, 0x00000000], [0x02000000, 0x00000000]],
    ["rank 7, file F", [0x00040000, 0x00000000], [0x04000000, 0x00000000]],
    ["rank 7, file E", [0x00080000, 0x00000000], [0x08000000, 0x00000000]],
    ["rank 7, file D", [0x00100000, 0x00000000], [0x10000000, 0x00000000]],
    ["rank 7, file C", [0x00200000, 0x00000000], [0x20000000, 0x00000000]],
    ["rank 7, file B", [0x00400000, 0x00000000], [0x40000000, 0x00000000]],
    ["rank 7, file A", [0x00800000, 0x00000000], [0x80000000, 0x00000000]],
    ["rank 8, file H", [0x01000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file G", [0x02000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file F", [0x04000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file E", [0x08000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file D", [0x10000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file C", [0x20000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file B", [0x40000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file A", [0x80000000, 0x00000000], [0x00000000, 0x00000000]],
    ["everything", [0xffffffff, 0xffffffff], [0xffffffff, 0xffffff00]],
  ];
  it.each(cases)("%s", (_, input, output) => {
    expect(getTopSquare(input)).toEqual(output);
  });
});

describe("getBottomSquare", () => {
  const cases: [string, Bitboard, Bitboard][] = [
    ["null", [0x00000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 1, file H", [0x00000000, 0x00000001], [0x00000000, 0x00000000]],
    ["rank 1, file G", [0x00000000, 0x00000002], [0x00000000, 0x00000000]],
    ["rank 1, file F", [0x00000000, 0x00000004], [0x00000000, 0x00000000]],
    ["rank 1, file E", [0x00000000, 0x00000008], [0x00000000, 0x00000000]],
    ["rank 1, file D", [0x00000000, 0x00000010], [0x00000000, 0x00000000]],
    ["rank 1, file C", [0x00000000, 0x00000020], [0x00000000, 0x00000000]],
    ["rank 1, file B", [0x00000000, 0x00000040], [0x00000000, 0x00000000]],
    ["rank 1, file A", [0x00000000, 0x00000080], [0x00000000, 0x00000000]],
    ["rank 2, file H", [0x00000000, 0x00000100], [0x00000000, 0x00000001]],
    ["rank 2, file G", [0x00000000, 0x00000200], [0x00000000, 0x00000002]],
    ["rank 2, file F", [0x00000000, 0x00000400], [0x00000000, 0x00000004]],
    ["rank 2, file E", [0x00000000, 0x00000800], [0x00000000, 0x00000008]],
    ["rank 2, file D", [0x00000000, 0x00001000], [0x00000000, 0x00000010]],
    ["rank 2, file C", [0x00000000, 0x00002000], [0x00000000, 0x00000020]],
    ["rank 2, file B", [0x00000000, 0x00004000], [0x00000000, 0x00000040]],
    ["rank 2, file A", [0x00000000, 0x00008000], [0x00000000, 0x00000080]],
    ["rank 3, file H", [0x00000000, 0x00010000], [0x00000000, 0x00000100]],
    ["rank 3, file G", [0x00000000, 0x00020000], [0x00000000, 0x00000200]],
    ["rank 3, file F", [0x00000000, 0x00040000], [0x00000000, 0x00000400]],
    ["rank 3, file E", [0x00000000, 0x00080000], [0x00000000, 0x00000800]],
    ["rank 3, file D", [0x00000000, 0x00100000], [0x00000000, 0x00001000]],
    ["rank 3, file C", [0x00000000, 0x00200000], [0x00000000, 0x00002000]],
    ["rank 3, file B", [0x00000000, 0x00400000], [0x00000000, 0x00004000]],
    ["rank 3, file A", [0x00000000, 0x00800000], [0x00000000, 0x00008000]],
    ["rank 4, file H", [0x00000000, 0x01000000], [0x00000000, 0x00010000]],
    ["rank 4, file G", [0x00000000, 0x02000000], [0x00000000, 0x00020000]],
    ["rank 4, file F", [0x00000000, 0x04000000], [0x00000000, 0x00040000]],
    ["rank 4, file E", [0x00000000, 0x08000000], [0x00000000, 0x00080000]],
    ["rank 4, file D", [0x00000000, 0x10000000], [0x00000000, 0x00100000]],
    ["rank 4, file C", [0x00000000, 0x20000000], [0x00000000, 0x00200000]],
    ["rank 4, file B", [0x00000000, 0x40000000], [0x00000000, 0x00400000]],
    ["rank 4, file A", [0x00000000, 0x80000000], [0x00000000, 0x00800000]],
    ["rank 5, file H", [0x00000001, 0x00000000], [0x00000000, 0x01000000]],
    ["rank 5, file G", [0x00000002, 0x00000000], [0x00000000, 0x02000000]],
    ["rank 5, file F", [0x00000004, 0x00000000], [0x00000000, 0x04000000]],
    ["rank 5, file E", [0x00000008, 0x00000000], [0x00000000, 0x08000000]],
    ["rank 5, file D", [0x00000010, 0x00000000], [0x00000000, 0x10000000]],
    ["rank 5, file C", [0x00000020, 0x00000000], [0x00000000, 0x20000000]],
    ["rank 5, file B", [0x00000040, 0x00000000], [0x00000000, 0x40000000]],
    ["rank 5, file A", [0x00000080, 0x00000000], [0x00000000, 0x80000000]],
    ["rank 6, file H", [0x00000100, 0x00000000], [0x00000001, 0x00000000]],
    ["rank 6, file G", [0x00000200, 0x00000000], [0x00000002, 0x00000000]],
    ["rank 6, file F", [0x00000400, 0x00000000], [0x00000004, 0x00000000]],
    ["rank 6, file E", [0x00000800, 0x00000000], [0x00000008, 0x00000000]],
    ["rank 6, file D", [0x00001000, 0x00000000], [0x00000010, 0x00000000]],
    ["rank 6, file C", [0x00002000, 0x00000000], [0x00000020, 0x00000000]],
    ["rank 6, file B", [0x00004000, 0x00000000], [0x00000040, 0x00000000]],
    ["rank 6, file A", [0x00008000, 0x00000000], [0x00000080, 0x00000000]],
    ["rank 7, file H", [0x00010000, 0x00000000], [0x00000100, 0x00000000]],
    ["rank 7, file G", [0x00020000, 0x00000000], [0x00000200, 0x00000000]],
    ["rank 7, file F", [0x00040000, 0x00000000], [0x00000400, 0x00000000]],
    ["rank 7, file E", [0x00080000, 0x00000000], [0x00000800, 0x00000000]],
    ["rank 7, file D", [0x00100000, 0x00000000], [0x00001000, 0x00000000]],
    ["rank 7, file C", [0x00200000, 0x00000000], [0x00002000, 0x00000000]],
    ["rank 7, file B", [0x00400000, 0x00000000], [0x00004000, 0x00000000]],
    ["rank 7, file A", [0x00800000, 0x00000000], [0x00008000, 0x00000000]],
    ["rank 8, file H", [0x01000000, 0x00000000], [0x00010000, 0x00000000]],
    ["rank 8, file G", [0x02000000, 0x00000000], [0x00020000, 0x00000000]],
    ["rank 8, file F", [0x04000000, 0x00000000], [0x00040000, 0x00000000]],
    ["rank 8, file E", [0x08000000, 0x00000000], [0x00080000, 0x00000000]],
    ["rank 8, file D", [0x10000000, 0x00000000], [0x00100000, 0x00000000]],
    ["rank 8, file C", [0x20000000, 0x00000000], [0x00200000, 0x00000000]],
    ["rank 8, file B", [0x40000000, 0x00000000], [0x00400000, 0x00000000]],
    ["rank 8, file A", [0x80000000, 0x00000000], [0x00800000, 0x00000000]],
    ["everything", [0xffffffff, 0xffffffff], [0x00ffffff, 0xffffffff]],
  ];
  it.each(cases)("%s", (_, input, output) => {
    expect(getBottomSquare(input)).toEqual(output);
  });
});

function getObservedSqaresToLeft(
  allPieces: Bitboard,
  enemyPieces: Bitboard,
  observingPieces: Bitboard
) {
  let changeMask: Bitboard = [0xffffffff, 0xffffffff];
  let toLeft = observingPieces;
  let observedSquares = observingPieces;
  let c = 0;
  while (!isNull(toLeft) && !isNull(changeMask)) {
    if (c++ > 100) {
      throw new Error("infinite loop");
    }

    toLeft = getLeftSquare(toLeft);
    changeMask = bitwiseAnd([
      bitwiseXor([bitwiseAnd([toLeft, allPieces]), toLeft]),
      getLeftSquare(changeMask),
    ]);
    observedSquares = bitwiseXor([observedSquares, changeMask]);
  }
  return bitwiseOr([
    observingPieces,
    observedSquares,
    getLeftSquare(bitwiseAnd([getRightSquare(enemyPieces), observedSquares])),
  ]);
}

describe("getObservedSqaresToLeft", () => {
  describe("when there are no pieces to the left", () => {
    it("should observe all squares", () => {
      expect(
        getObservedSqaresToLeft(
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b11111111_11111110_11111100_11111000,
        0b11110000_11100000_11000000_10000000,
      ]);
    });
  });
  describe("when there is one own piece to the left", () => {
    it("should observe all squares up to the own piece", () => {
      expect(
        getObservedSqaresToLeft(
          [
            0b01000001_01000010_00100100_00101000,
            0b01010000_01100000_11000000_10000000,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b00111111_00111110_00011100_00011000,
        0b00110000_00100000_01000000_10000000,
      ]);
    });
  });
  describe("when there are multiple own piece to the left", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getObservedSqaresToLeft(
          [
            0b01001001_01001010_00101100_00111000,
            0b11010000_11100000_11000000_10000000,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b00000111_00000110_00000100_00001000,
        0b00110000_00100000_01000000_10000000,
      ]);
    });
  });
  describe("when there is one enemy piece to the left", () => {
    it("should observe all squares up to and including the enemy piece", () => {
      expect(
        getObservedSqaresToLeft(
          [
            0b01000001_01000010_00100100_00101000,
            0b01010000_01100000_11000000_10000000,
          ],
          [
            0b01000000_01000000_00100000_00100000,
            0b01000000_01000000_10000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b01111111_01111110_00111100_00111000,
        0b01110000_01100000_11000000_10000000,
      ]);
    });
  });
  describe("when there are multiple enemy piece to the left", () => {
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getObservedSqaresToLeft(
          [
            0b01001001_01001010_00101100_00111000,
            0b11010000_11100000_11000000_10000000,
          ],
          [
            0b01001000_01001000_00101000_00110000,
            0b11000000_11000000_10000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b00001111_00001110_00001100_00011000,
        0b01110000_01100000_11000000_10000000,
      ]);
    });
  });
  describe("when there are own and enemy piece to the left", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getObservedSqaresToLeft(
          [
            0b01001001_01001010_00101100_00111000,
            0b11010000_11100000_11000000_10000000,
          ],
          [
            0b01000000_01000000_00100000_00100000,
            0b10000000_10000000_00000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b00000111_00000110_00000100_00001000,
        0b00110000_00100000_01000000_10000000,
      ]);
    });
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getObservedSqaresToLeft(
          [
            0b01001001_01001010_00101100_00111000,
            0b11010000_11100000_11000000_10000000,
          ],
          [
            0b00001000_00001000_00001000_00010000,
            0b01000000_01000000_10000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b00001111_00001110_00001100_00011000,
        0b01110000_01100000_11000000_10000000,
      ]);
    });
  });
});

function getObservedSqaresToRight(
  allPieces: Bitboard,
  enemyPieces: Bitboard,
  observingPieces: Bitboard
) {
  let changeMask: Bitboard = [0xffffffff, 0xffffffff];
  let toRight = observingPieces;
  let observedSquares = observingPieces;
  let c = 0;
  while (!isNull(toRight) && !isNull(changeMask)) {
    if (c++ > 100) {
      throw new Error("infinite loop");
    }

    toRight = getRightSquare(toRight);
    changeMask = bitwiseAnd([
      bitwiseXor([bitwiseAnd([toRight, allPieces]), toRight]),
      getRightSquare(changeMask),
    ]);
    observedSquares = bitwiseXor([observedSquares, changeMask]);
  }
  return bitwiseOr([
    observingPieces,
    observedSquares,
    getRightSquare(bitwiseAnd([getLeftSquare(enemyPieces), observedSquares])),
  ]);
}

describe("getObservedSqaresToRight", () => {
  describe("when there are no pieces to the right", () => {
    it("should observe all squares", () => {
      expect(
        getObservedSqaresToRight(
          [
            0b00010000_00100000_01000000_10000000,
            0b00000001_00000010_00000100_00001000,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b00010000_00100000_01000000_10000000,
            0b00000001_00000010_00000100_00001000,
          ]
        )
      ).toEqual([
        0b00011111_00111111_01111111_11111111,
        0b00000001_00000011_00000111_00001111,
      ]);
    });
  });
  describe("when there is one own piece to the right", () => {
    it("should observe all squares up to the own piece", () => {
      expect(
        getObservedSqaresToRight(
          [
            0b00010100_00100100_01000010_10000010,
            0b00000001_00000011_00000110_00001010,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b00010000_00100000_01000000_10000000,
            0b00000001_00000010_00000100_00001000,
          ]
        )
      ).toEqual([
        0b00011000_00111000_01111100_11111100,
        0b00000001_00000010_00000100_00001100,
      ]);
    });
  });
  describe("when there are multiple own piece to the right", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getObservedSqaresToRight(
          [
            0b00011100_00110100_01010010_10010010,
            0b00000001_00000011_00000111_00001011,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b00010000_00100000_01000000_10000000,
            0b00000001_00000010_00000100_00001000,
          ]
        )
      ).toEqual([
        0b00010000_00100000_01100000_11100000,
        0b00000001_00000010_00000100_00001100,
      ]);
    });
  });
  describe("when there is one enemy piece to the right", () => {
    it("should observe all squares up to and including the enemy piece", () => {
      expect(
        getObservedSqaresToRight(
          [
            0b00010100_00100100_01000010_10000010,
            0b00000001_00000011_00000110_00001010,
          ],
          [
            0b00000100_00000100_00000010_00000010,
            0b00000000_00000001_00000010_00000010,
          ],
          [
            0b00010000_00100000_01000000_10000000,
            0b00000001_00000010_00000100_00001000,
          ]
        )
      ).toEqual([
        0b00011100_00111100_01111110_11111110,
        0b00000001_00000011_00000110_00001110,
      ]);
    });
  });
  describe("when there are multiple enemy piece to the right", () => {
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getObservedSqaresToRight(
          [
            0b00011100_00110100_01010010_10010010,
            0b00000001_00000011_00000111_00001011,
          ],
          [
            0b00001100_00010100_00010010_00010010,
            0b00000000_00000001_00000011_00000011,
          ],
          [
            0b00010000_00100000_01000000_10000000,
            0b00000001_00000010_00000100_00001000,
          ]
        )
      ).toEqual([
        0b00011000_00110000_01110000_11110000,
        0b00000001_00000011_00000110_00001110,
      ]);
    });
  });
  describe("when there are own and enemy piece to the right", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getObservedSqaresToRight(
          [
            0b00011100_00110100_01010010_10010010,
            0b00000001_00000011_00000111_00001011,
          ],
          [
            0b00000100_00000100_00000010_00000010,
            0b00000000_00000000_00000001_00000001,
          ],
          [
            0b00010000_00100000_01000000_10000000,
            0b00000001_00000010_00000100_00001000,
          ]
        )
      ).toEqual([
        0b00010000_00100000_01100000_11100000,
        0b00000001_00000010_00000100_00001100,
      ]);
    });
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getObservedSqaresToRight(
          [
            0b00011100_00110100_01010010_10010010,
            0b00000001_00000011_00000111_00001011,
          ],
          [
            0b00001000_00010000_00010000_00010000,
            0b00000000_00000001_00000010_00000010,
          ],
          [
            0b00010000_00100000_01000000_10000000,
            0b00000001_00000010_00000100_00001000,
          ]
        )
      ).toEqual([
        0b00011000_00110000_01110000_11110000,
        0b00000001_00000011_00000110_00001110,
      ]);
    });
  });
});

function getObservedSqaresToTop(
  allPieces: Bitboard,
  enemyPieces: Bitboard,
  observingPieces: Bitboard
) {
  let changeMask: Bitboard = [0xffffffff, 0xffffffff];
  let toTop = observingPieces;
  let observedSquares = observingPieces;
  let c = 0;
  while (!isNull(toTop) && !isNull(changeMask)) {
    if (c++ > 100) {
      throw new Error("infinite loop");
    }

    toTop = getTopSquare(toTop);
    changeMask = bitwiseAnd([
      bitwiseXor([bitwiseAnd([toTop, allPieces]), toTop]),
      getTopSquare(changeMask),
    ]);
    observedSquares = bitwiseXor([observedSquares, changeMask]);
  }
  return bitwiseOr([
    observingPieces,
    observedSquares,
    getTopSquare(bitwiseAnd([getBottomSquare(enemyPieces), observedSquares])),
  ]);
}

describe("getObservedSqaresToTop", () => {
  describe("when there are no pieces to the top", () => {
    it("should observe all squares", () => {
      expect(
        getObservedSqaresToTop(
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b11111111_11111110_11111100_11111000,
        0b11110000_11100000_11000000_10000000,
      ]);
    });
  });
  describe("when there is one own piece to the top", () => {
    it("should observe all squares up to the own piece", () => {
      expect(
        getObservedSqaresToTop(
          [
            0b00000011_11001110_00110100_00001000,
            0b00010000_00100000_01000000_10000000,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b00000001_00000010_11001100_11111000,
        0b11110000_11100000_11000000_10000000,
      ]);
    });
  });
  describe("when there are multiple own piece to the top", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getObservedSqaresToTop(
          [
            0b00001111_11001110_00110100_00011000,
            0b11110000_00100000_01000000_10000000,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b00000001_00000010_00001100_00001000,
        0b00010000_11100000_11000000_10000000,
      ]);
    });
  });
  describe("when there is one enemy piece to the top", () => {
    it("should observe all squares up to and including the enemy piece", () => {
      expect(
        getObservedSqaresToTop(
          [
            0b00000011_11001110_00110100_00001000,
            0b00010000_00100000_01000000_10000000,
          ],
          [
            0b00000010_11001100_00110000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b00000011_11001110_11111100_11111000,
        0b11110000_11100000_11000000_10000000,
      ]);
    });
  });
  describe("when there are multiple enemy piece to the top", () => {
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getObservedSqaresToTop(
          [
            0b00001111_11001110_00110100_00011000,
            0b11110000_00100000_01000000_10000000,
          ],
          [
            0b00001110_11001100_00110000_00010000,
            0b11100000_00000000_00000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b00000011_00001110_00001100_00011000,
        0b11110000_11100000_11000000_10000000,
      ]);
    });
  });
  describe("when there are own and enemy piece to the top", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getObservedSqaresToTop(
          [
            0b00001111_11001110_00110100_00011000,
            0b11110000_00100000_01000000_10000000,
          ],
          [
            0b00001100_11000000_00110000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b00000001_00000010_00001100_00001000,
        0b00010000_11100000_11000000_10000000,
      ]);
    });
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getObservedSqaresToTop(
          [
            0b00001111_11001110_00110100_00011000,
            0b11110000_00100000_01000000_10000000,
          ],
          [
            0b00000010_00001100_00000000_00010000,
            0b11100000_00000000_00000000_00000000,
          ],
          [
            0b00000001_00000010_00000100_00001000,
            0b00010000_00100000_01000000_10000000,
          ]
        )
      ).toEqual([
        0b00000011_00001110_00001100_00011000,
        0b11110000_11100000_11000000_10000000,
      ]);
    });
  });
});

function getObservedSqaresToBottom(
  allPieces: Bitboard,
  enemyPieces: Bitboard,
  observingPieces: Bitboard
) {
  let changeMask: Bitboard = [0xffffffff, 0xffffffff];
  let toBottom = observingPieces;
  let observedSquares = observingPieces;
  let c = 0;
  while (!isNull(toBottom) && !isNull(changeMask)) {
    if (c++ > 100) {
      throw new Error("infinite loop");
    }

    toBottom = getBottomSquare(toBottom);
    changeMask = bitwiseAnd([
      bitwiseXor([bitwiseAnd([toBottom, allPieces]), toBottom]),
      getBottomSquare(changeMask),
    ]);
    observedSquares = bitwiseXor([observedSquares, changeMask]);
  }
  return bitwiseOr([
    observingPieces,
    observedSquares,
    getBottomSquare(bitwiseAnd([getTopSquare(enemyPieces), observedSquares])),
  ]);
}

describe("getObservedSqaresToBottom", () => {
  describe("when there are no pieces to the bottom", () => {
    it("should observe all squares", () => {
      expect(
        getObservedSqaresToBottom(
          [
            0b10000000_01000000_00100000_00010000,
            0b00001000_00000100_00000010_00000001,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b10000000_01000000_00100000_00010000,
            0b00001000_00000100_00000010_00000001,
          ]
        )
      ).toEqual([
        0b10000000_11000000_11100000_11110000,
        0b11111000_11111100_11111110_11111111,
      ]);
    });
  });
  describe("when there is one own piece to the bottom", () => {
    it("should observe all squares up to the own piece", () => {
      expect(
        getObservedSqaresToBottom(
          [
            0b10000000_01000000_00100000_00010000,
            0b00001000_00110100_11001110_00000011,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b10000000_01000000_00100000_00010000,
            0b00001000_00000100_00000010_00000001,
          ]
        )
      ).toEqual([
        0b10000000_11000000_11100000_11110000,
        0b11111000_11001100_00000010_00000001,
      ]);
    });
  });
  describe("when there are multiple own piece to the bottom", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getObservedSqaresToBottom(
          [
            0b10000000_01000000_00100000_11110000,
            0b00011000_00110100_11001110_00001111,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000,
          ],
          [
            0b10000000_01000000_00100000_00010000,
            0b00001000_00000100_00000010_00000001,
          ]
        )
      ).toEqual([
        0b10000000_11000000_11100000_00010000,
        0b00001000_00001100_00000010_00000001,
      ]);
    });
  });
  describe("when there is one enemy piece to the bottom", () => {
    it("should observe all squares up to and including the enemy piece", () => {
      expect(
        getObservedSqaresToBottom(
          [
            0b10000000_01000000_00100000_00010000,
            0b00001000_00110100_11001110_00000011,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00110000_11001100_00000010,
          ],
          [
            0b10000000_01000000_00100000_00010000,
            0b00001000_00000100_00000010_00000001,
          ]
        )
      ).toEqual([
        0b10000000_11000000_11100000_11110000,
        0b11111000_11111100_11001110_00000011,
      ]);
    });
  });
  describe("when there are multiple enemy piece to the bottom", () => {
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getObservedSqaresToBottom(
          [
            0b10000000_01000000_00100000_11110000,
            0b00011000_00110100_11001110_00001111,
          ],
          [
            0b00000000_00000000_00000000_11100000,
            0b00010000_00110000_11001100_00001110,
          ],
          [
            0b10000000_01000000_00100000_00010000,
            0b00001000_00000100_00000010_00000001,
          ]
        )
      ).toEqual([
        0b10000000_11000000_11100000_11110000,
        0b00011000_00001100_00001110_00000011,
      ]);
    });
  });
  describe("when there are own and enemy piece to the bottom", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getObservedSqaresToBottom(
          [
            0b10000000_01000000_00100000_11110000,
            0b00011000_00110100_11001110_00001111,
          ],
          [
            0b00000000_00000000_00000000_00000000,
            0b00000000_00110000_11000000_00001100,
          ],
          [
            0b10000000_01000000_00100000_00010000,
            0b00001000_00000100_00000010_00000001,
          ]
        )
      ).toEqual([
        0b10000000_11000000_11100000_00010000,
        0b00001000_00001100_00000010_00000001,
      ]);
    });
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getObservedSqaresToBottom(
          [
            0b10000000_01000000_00100000_11110000,
            0b00011000_00110100_11001110_00001111,
          ],
          [
            0b00000000_00000000_00000000_11100000,
            0b00010000_00000000_00001100_00000010,
          ],
          [
            0b10000000_01000000_00100000_00010000,
            0b00001000_00000100_00000010_00000001,
          ]
        )
      ).toEqual([
        0b10000000_11000000_11100000_11110000,
        0b00011000_00001100_00001110_00000011,
      ]);
    });
  });
});
