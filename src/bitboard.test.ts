import {
  Bitboard,
  getBottomSquare,
  getLeftSquare,
  getRightSquare,
  getTopSquare,
  getMoveableSqaresToLeft,
  getMoveableSqaresToRight,
  getMoveableSqaresToTop,
  getMoveableSqaresToBottom,
  getMoveableSqaresToTopLeft,
} from "./bitboard";

describe("getLeftSquare", () => {
  const cases: [string, Bitboard, Bitboard][] = [
    ["null", [0x00000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 1, file H", [0x00000000, 0x00000001], [0x00000000, 0x00000002]],
    ["rank 1, file G", [0x00000000, 0x00000002], [0x00000000, 0x00000004]],
    ["rank 1, file F", [0x00000000, 0x00000004], [0x00000000, 0x00000008]],
    ["rank 1, file E", [0x00000000, 0x00000008], [0x00000000, 0x00000010]],
    ["rank 1, file D", [0x00000000, 0x00000010], [0x00000000, 0x00000020]],
    ["rank 1, file C", [0x00000000, 0x00000020], [0x00000000, 0x00000040]],
    ["rank 1, file B", [0x00000000, 0x00000040], [0x00000000, 0x00000080]],
    ["rank 1, file A", [0x00000000, 0x00000080], [0x00000000, 0x00000000]],
    ["rank 2, file H", [0x00000000, 0x00000100], [0x00000000, 0x00000200]],
    ["rank 2, file G", [0x00000000, 0x00000200], [0x00000000, 0x00000400]],
    ["rank 2, file F", [0x00000000, 0x00000400], [0x00000000, 0x00000800]],
    ["rank 2, file E", [0x00000000, 0x00000800], [0x00000000, 0x00001000]],
    ["rank 2, file D", [0x00000000, 0x00001000], [0x00000000, 0x00002000]],
    ["rank 2, file C", [0x00000000, 0x00002000], [0x00000000, 0x00004000]],
    ["rank 2, file B", [0x00000000, 0x00004000], [0x00000000, 0x00008000]],
    ["rank 2, file A", [0x00000000, 0x00008000], [0x00000000, 0x00000000]],
    ["rank 3, file H", [0x00000000, 0x00010000], [0x00000000, 0x00020000]],
    ["rank 3, file G", [0x00000000, 0x00020000], [0x00000000, 0x00040000]],
    ["rank 3, file F", [0x00000000, 0x00040000], [0x00000000, 0x00080000]],
    ["rank 3, file E", [0x00000000, 0x00080000], [0x00000000, 0x00100000]],
    ["rank 3, file D", [0x00000000, 0x00100000], [0x00000000, 0x00200000]],
    ["rank 3, file C", [0x00000000, 0x00200000], [0x00000000, 0x00400000]],
    ["rank 3, file B", [0x00000000, 0x00400000], [0x00000000, 0x00800000]],
    ["rank 3, file A", [0x00000000, 0x00800000], [0x00000000, 0x00000000]],
    ["rank 4, file H", [0x00000000, 0x01000000], [0x00000000, 0x02000000]],
    ["rank 4, file G", [0x00000000, 0x02000000], [0x00000000, 0x04000000]],
    ["rank 4, file F", [0x00000000, 0x04000000], [0x00000000, 0x08000000]],
    ["rank 4, file E", [0x00000000, 0x08000000], [0x00000000, 0x10000000]],
    ["rank 4, file D", [0x00000000, 0x10000000], [0x00000000, 0x20000000]],
    ["rank 4, file C", [0x00000000, 0x20000000], [0x00000000, 0x40000000]],
    ["rank 4, file B", [0x00000000, 0x40000000], [0x00000000, 0x80000000]],
    ["rank 4, file A", [0x00000000, 0x80000000], [0x00000000, 0x00000000]],
    ["rank 5, file H", [0x00000001, 0x00000000], [0x00000002, 0x00000000]],
    ["rank 5, file G", [0x00000002, 0x00000000], [0x00000004, 0x00000000]],
    ["rank 5, file F", [0x00000004, 0x00000000], [0x00000008, 0x00000000]],
    ["rank 5, file E", [0x00000008, 0x00000000], [0x00000010, 0x00000000]],
    ["rank 5, file D", [0x00000010, 0x00000000], [0x00000020, 0x00000000]],
    ["rank 5, file C", [0x00000020, 0x00000000], [0x00000040, 0x00000000]],
    ["rank 5, file B", [0x00000040, 0x00000000], [0x00000080, 0x00000000]],
    ["rank 5, file A", [0x00000080, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 6, file H", [0x00000100, 0x00000000], [0x00000200, 0x00000000]],
    ["rank 6, file G", [0x00000200, 0x00000000], [0x00000400, 0x00000000]],
    ["rank 6, file F", [0x00000400, 0x00000000], [0x00000800, 0x00000000]],
    ["rank 6, file E", [0x00000800, 0x00000000], [0x00001000, 0x00000000]],
    ["rank 6, file D", [0x00001000, 0x00000000], [0x00002000, 0x00000000]],
    ["rank 6, file C", [0x00002000, 0x00000000], [0x00004000, 0x00000000]],
    ["rank 6, file B", [0x00004000, 0x00000000], [0x00008000, 0x00000000]],
    ["rank 6, file A", [0x00008000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 7, file H", [0x00010000, 0x00000000], [0x00020000, 0x00000000]],
    ["rank 7, file G", [0x00020000, 0x00000000], [0x00040000, 0x00000000]],
    ["rank 7, file F", [0x00040000, 0x00000000], [0x00080000, 0x00000000]],
    ["rank 7, file E", [0x00080000, 0x00000000], [0x00100000, 0x00000000]],
    ["rank 7, file D", [0x00100000, 0x00000000], [0x00200000, 0x00000000]],
    ["rank 7, file C", [0x00200000, 0x00000000], [0x00400000, 0x00000000]],
    ["rank 7, file B", [0x00400000, 0x00000000], [0x00800000, 0x00000000]],
    ["rank 7, file A", [0x00800000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file H", [0x01000000, 0x00000000], [0x02000000, 0x00000000]],
    ["rank 8, file G", [0x02000000, 0x00000000], [0x04000000, 0x00000000]],
    ["rank 8, file F", [0x04000000, 0x00000000], [0x08000000, 0x00000000]],
    ["rank 8, file E", [0x08000000, 0x00000000], [0x10000000, 0x00000000]],
    ["rank 8, file D", [0x10000000, 0x00000000], [0x20000000, 0x00000000]],
    ["rank 8, file C", [0x20000000, 0x00000000], [0x40000000, 0x00000000]],
    ["rank 8, file B", [0x40000000, 0x00000000], [0x80000000, 0x00000000]],
    ["rank 8, file A", [0x80000000, 0x00000000], [0x00000000, 0x00000000]],
    ["everything", [0xffffffff, 0xffffffff], [0xfefefefe, 0xfefefefe]],
  ];
  it.each(cases)("%s", (_, input, output) => {
    expect(getLeftSquare(input)).toEqual(output);
  });
});

describe("getRightSquare", () => {
  const cases: [string, Bitboard, Bitboard][] = [
    ["null", [0x00000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 1, file H", [0x00000000, 0x00000001], [0x00000000, 0x00000000]],
    ["rank 1, file G", [0x00000000, 0x00000002], [0x00000000, 0x00000001]],
    ["rank 1, file F", [0x00000000, 0x00000004], [0x00000000, 0x00000002]],
    ["rank 1, file E", [0x00000000, 0x00000008], [0x00000000, 0x00000004]],
    ["rank 1, file D", [0x00000000, 0x00000010], [0x00000000, 0x00000008]],
    ["rank 1, file C", [0x00000000, 0x00000020], [0x00000000, 0x00000010]],
    ["rank 1, file B", [0x00000000, 0x00000040], [0x00000000, 0x00000020]],
    ["rank 1, file A", [0x00000000, 0x00000080], [0x00000000, 0x00000040]],
    ["rank 2, file H", [0x00000000, 0x00000100], [0x00000000, 0x00000000]],
    ["rank 2, file G", [0x00000000, 0x00000200], [0x00000000, 0x00000100]],
    ["rank 2, file F", [0x00000000, 0x00000400], [0x00000000, 0x00000200]],
    ["rank 2, file E", [0x00000000, 0x00000800], [0x00000000, 0x00000400]],
    ["rank 2, file D", [0x00000000, 0x00001000], [0x00000000, 0x00000800]],
    ["rank 2, file C", [0x00000000, 0x00002000], [0x00000000, 0x00001000]],
    ["rank 2, file B", [0x00000000, 0x00004000], [0x00000000, 0x00002000]],
    ["rank 2, file A", [0x00000000, 0x00008000], [0x00000000, 0x00004000]],
    ["rank 3, file H", [0x00000000, 0x00010000], [0x00000000, 0x00000000]],
    ["rank 3, file G", [0x00000000, 0x00020000], [0x00000000, 0x00010000]],
    ["rank 3, file F", [0x00000000, 0x00040000], [0x00000000, 0x00020000]],
    ["rank 3, file E", [0x00000000, 0x00080000], [0x00000000, 0x00040000]],
    ["rank 3, file D", [0x00000000, 0x00100000], [0x00000000, 0x00080000]],
    ["rank 3, file C", [0x00000000, 0x00200000], [0x00000000, 0x00100000]],
    ["rank 3, file B", [0x00000000, 0x00400000], [0x00000000, 0x00200000]],
    ["rank 3, file A", [0x00000000, 0x00800000], [0x00000000, 0x00400000]],
    ["rank 4, file H", [0x00000000, 0x01000000], [0x00000000, 0x00000000]],
    ["rank 4, file G", [0x00000000, 0x02000000], [0x00000000, 0x01000000]],
    ["rank 4, file F", [0x00000000, 0x04000000], [0x00000000, 0x02000000]],
    ["rank 4, file E", [0x00000000, 0x08000000], [0x00000000, 0x04000000]],
    ["rank 4, file D", [0x00000000, 0x10000000], [0x00000000, 0x08000000]],
    ["rank 4, file C", [0x00000000, 0x20000000], [0x00000000, 0x10000000]],
    ["rank 4, file B", [0x00000000, 0x40000000], [0x00000000, 0x20000000]],
    ["rank 4, file A", [0x00000000, 0x80000000], [0x00000000, 0x40000000]],
    ["rank 5, file H", [0x00000001, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 5, file G", [0x00000002, 0x00000000], [0x00000001, 0x00000000]],
    ["rank 5, file F", [0x00000004, 0x00000000], [0x00000002, 0x00000000]],
    ["rank 5, file E", [0x00000008, 0x00000000], [0x00000004, 0x00000000]],
    ["rank 5, file D", [0x00000010, 0x00000000], [0x00000008, 0x00000000]],
    ["rank 5, file C", [0x00000020, 0x00000000], [0x00000010, 0x00000000]],
    ["rank 5, file B", [0x00000040, 0x00000000], [0x00000020, 0x00000000]],
    ["rank 5, file A", [0x00000080, 0x00000000], [0x00000040, 0x00000000]],
    ["rank 6, file H", [0x00000100, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 6, file G", [0x00000200, 0x00000000], [0x00000100, 0x00000000]],
    ["rank 6, file F", [0x00000400, 0x00000000], [0x00000200, 0x00000000]],
    ["rank 6, file E", [0x00000800, 0x00000000], [0x00000400, 0x00000000]],
    ["rank 6, file D", [0x00001000, 0x00000000], [0x00000800, 0x00000000]],
    ["rank 6, file C", [0x00002000, 0x00000000], [0x00001000, 0x00000000]],
    ["rank 6, file B", [0x00004000, 0x00000000], [0x00002000, 0x00000000]],
    ["rank 6, file A", [0x00008000, 0x00000000], [0x00004000, 0x00000000]],
    ["rank 7, file H", [0x00010000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 7, file G", [0x00020000, 0x00000000], [0x00010000, 0x00000000]],
    ["rank 7, file F", [0x00040000, 0x00000000], [0x00020000, 0x00000000]],
    ["rank 7, file E", [0x00080000, 0x00000000], [0x00040000, 0x00000000]],
    ["rank 7, file D", [0x00100000, 0x00000000], [0x00080000, 0x00000000]],
    ["rank 7, file C", [0x00200000, 0x00000000], [0x00100000, 0x00000000]],
    ["rank 7, file B", [0x00400000, 0x00000000], [0x00200000, 0x00000000]],
    ["rank 7, file A", [0x00800000, 0x00000000], [0x00400000, 0x00000000]],
    ["rank 8, file H", [0x01000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file G", [0x02000000, 0x00000000], [0x01000000, 0x00000000]],
    ["rank 8, file F", [0x04000000, 0x00000000], [0x02000000, 0x00000000]],
    ["rank 8, file E", [0x08000000, 0x00000000], [0x04000000, 0x00000000]],
    ["rank 8, file D", [0x10000000, 0x00000000], [0x08000000, 0x00000000]],
    ["rank 8, file C", [0x20000000, 0x00000000], [0x10000000, 0x00000000]],
    ["rank 8, file B", [0x40000000, 0x00000000], [0x20000000, 0x00000000]],
    ["rank 8, file A", [0x80000000, 0x00000000], [0x40000000, 0x00000000]],
    ["everything", [0xffffffff, 0xffffffff], [0x7f7f7f7f, 0x7f7f7f7f]],
  ];
  it.each(cases)("%s", (_, input, output) => {
    expect(getRightSquare(input)).toEqual(output);
  });
});

describe("getTopSquare", () => {
  const cases: [string, Bitboard, Bitboard][] = [
    ["null", [0x00000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 1, file H", [0x00000000, 0x00000001], [0x00000000, 0x00000100]],
    ["rank 1, file G", [0x00000000, 0x00000002], [0x00000000, 0x00000200]],
    ["rank 1, file F", [0x00000000, 0x00000004], [0x00000000, 0x00000400]],
    ["rank 1, file E", [0x00000000, 0x00000008], [0x00000000, 0x00000800]],
    ["rank 1, file D", [0x00000000, 0x00000010], [0x00000000, 0x00001000]],
    ["rank 1, file C", [0x00000000, 0x00000020], [0x00000000, 0x00002000]],
    ["rank 1, file B", [0x00000000, 0x00000040], [0x00000000, 0x00004000]],
    ["rank 1, file A", [0x00000000, 0x00000080], [0x00000000, 0x00008000]],
    ["rank 2, file H", [0x00000000, 0x00000100], [0x00000000, 0x00010000]],
    ["rank 2, file G", [0x00000000, 0x00000200], [0x00000000, 0x00020000]],
    ["rank 2, file F", [0x00000000, 0x00000400], [0x00000000, 0x00040000]],
    ["rank 2, file E", [0x00000000, 0x00000800], [0x00000000, 0x00080000]],
    ["rank 2, file D", [0x00000000, 0x00001000], [0x00000000, 0x00100000]],
    ["rank 2, file C", [0x00000000, 0x00002000], [0x00000000, 0x00200000]],
    ["rank 2, file B", [0x00000000, 0x00004000], [0x00000000, 0x00400000]],
    ["rank 2, file A", [0x00000000, 0x00008000], [0x00000000, 0x00800000]],
    ["rank 3, file H", [0x00000000, 0x00010000], [0x00000000, 0x01000000]],
    ["rank 3, file G", [0x00000000, 0x00020000], [0x00000000, 0x02000000]],
    ["rank 3, file F", [0x00000000, 0x00040000], [0x00000000, 0x04000000]],
    ["rank 3, file E", [0x00000000, 0x00080000], [0x00000000, 0x08000000]],
    ["rank 3, file D", [0x00000000, 0x00100000], [0x00000000, 0x10000000]],
    ["rank 3, file C", [0x00000000, 0x00200000], [0x00000000, 0x20000000]],
    ["rank 3, file B", [0x00000000, 0x00400000], [0x00000000, 0x40000000]],
    ["rank 3, file A", [0x00000000, 0x00800000], [0x00000000, 0x80000000]],
    ["rank 4, file H", [0x00000000, 0x01000000], [0x00000001, 0x00000000]],
    ["rank 4, file G", [0x00000000, 0x02000000], [0x00000002, 0x00000000]],
    ["rank 4, file F", [0x00000000, 0x04000000], [0x00000004, 0x00000000]],
    ["rank 4, file E", [0x00000000, 0x08000000], [0x00000008, 0x00000000]],
    ["rank 4, file D", [0x00000000, 0x10000000], [0x00000010, 0x00000000]],
    ["rank 4, file C", [0x00000000, 0x20000000], [0x00000020, 0x00000000]],
    ["rank 4, file B", [0x00000000, 0x40000000], [0x00000040, 0x00000000]],
    ["rank 4, file A", [0x00000000, 0x80000000], [0x00000080, 0x00000000]],
    ["rank 5, file H", [0x00000001, 0x00000000], [0x00000100, 0x00000000]],
    ["rank 5, file G", [0x00000002, 0x00000000], [0x00000200, 0x00000000]],
    ["rank 5, file F", [0x00000004, 0x00000000], [0x00000400, 0x00000000]],
    ["rank 5, file E", [0x00000008, 0x00000000], [0x00000800, 0x00000000]],
    ["rank 5, file D", [0x00000010, 0x00000000], [0x00001000, 0x00000000]],
    ["rank 5, file C", [0x00000020, 0x00000000], [0x00002000, 0x00000000]],
    ["rank 5, file B", [0x00000040, 0x00000000], [0x00004000, 0x00000000]],
    ["rank 5, file A", [0x00000080, 0x00000000], [0x00008000, 0x00000000]],
    ["rank 6, file H", [0x00000100, 0x00000000], [0x00010000, 0x00000000]],
    ["rank 6, file G", [0x00000200, 0x00000000], [0x00020000, 0x00000000]],
    ["rank 6, file F", [0x00000400, 0x00000000], [0x00040000, 0x00000000]],
    ["rank 6, file E", [0x00000800, 0x00000000], [0x00080000, 0x00000000]],
    ["rank 6, file D", [0x00001000, 0x00000000], [0x00100000, 0x00000000]],
    ["rank 6, file C", [0x00002000, 0x00000000], [0x00200000, 0x00000000]],
    ["rank 6, file B", [0x00004000, 0x00000000], [0x00400000, 0x00000000]],
    ["rank 6, file A", [0x00008000, 0x00000000], [0x00800000, 0x00000000]],
    ["rank 7, file H", [0x00010000, 0x00000000], [0x01000000, 0x00000000]],
    ["rank 7, file G", [0x00020000, 0x00000000], [0x02000000, 0x00000000]],
    ["rank 7, file F", [0x00040000, 0x00000000], [0x04000000, 0x00000000]],
    ["rank 7, file E", [0x00080000, 0x00000000], [0x08000000, 0x00000000]],
    ["rank 7, file D", [0x00100000, 0x00000000], [0x10000000, 0x00000000]],
    ["rank 7, file C", [0x00200000, 0x00000000], [0x20000000, 0x00000000]],
    ["rank 7, file B", [0x00400000, 0x00000000], [0x40000000, 0x00000000]],
    ["rank 7, file A", [0x00800000, 0x00000000], [0x80000000, 0x00000000]],
    ["rank 8, file H", [0x01000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file G", [0x02000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file F", [0x04000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file E", [0x08000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file D", [0x10000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file C", [0x20000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file B", [0x40000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 8, file A", [0x80000000, 0x00000000], [0x00000000, 0x00000000]],
    ["everything", [0xffffffff, 0xffffffff], [0xffffffff, 0xffffff00]],
  ];
  it.each(cases)("%s", (_, input, output) => {
    expect(getTopSquare(input)).toEqual(output);
  });
});

describe("getBottomSquare", () => {
  const cases: [string, Bitboard, Bitboard][] = [
    ["null", [0x00000000, 0x00000000], [0x00000000, 0x00000000]],
    ["rank 1, file H", [0x00000000, 0x00000001], [0x00000000, 0x00000000]],
    ["rank 1, file G", [0x00000000, 0x00000002], [0x00000000, 0x00000000]],
    ["rank 1, file F", [0x00000000, 0x00000004], [0x00000000, 0x00000000]],
    ["rank 1, file E", [0x00000000, 0x00000008], [0x00000000, 0x00000000]],
    ["rank 1, file D", [0x00000000, 0x00000010], [0x00000000, 0x00000000]],
    ["rank 1, file C", [0x00000000, 0x00000020], [0x00000000, 0x00000000]],
    ["rank 1, file B", [0x00000000, 0x00000040], [0x00000000, 0x00000000]],
    ["rank 1, file A", [0x00000000, 0x00000080], [0x00000000, 0x00000000]],
    ["rank 2, file H", [0x00000000, 0x00000100], [0x00000000, 0x00000001]],
    ["rank 2, file G", [0x00000000, 0x00000200], [0x00000000, 0x00000002]],
    ["rank 2, file F", [0x00000000, 0x00000400], [0x00000000, 0x00000004]],
    ["rank 2, file E", [0x00000000, 0x00000800], [0x00000000, 0x00000008]],
    ["rank 2, file D", [0x00000000, 0x00001000], [0x00000000, 0x00000010]],
    ["rank 2, file C", [0x00000000, 0x00002000], [0x00000000, 0x00000020]],
    ["rank 2, file B", [0x00000000, 0x00004000], [0x00000000, 0x00000040]],
    ["rank 2, file A", [0x00000000, 0x00008000], [0x00000000, 0x00000080]],
    ["rank 3, file H", [0x00000000, 0x00010000], [0x00000000, 0x00000100]],
    ["rank 3, file G", [0x00000000, 0x00020000], [0x00000000, 0x00000200]],
    ["rank 3, file F", [0x00000000, 0x00040000], [0x00000000, 0x00000400]],
    ["rank 3, file E", [0x00000000, 0x00080000], [0x00000000, 0x00000800]],
    ["rank 3, file D", [0x00000000, 0x00100000], [0x00000000, 0x00001000]],
    ["rank 3, file C", [0x00000000, 0x00200000], [0x00000000, 0x00002000]],
    ["rank 3, file B", [0x00000000, 0x00400000], [0x00000000, 0x00004000]],
    ["rank 3, file A", [0x00000000, 0x00800000], [0x00000000, 0x00008000]],
    ["rank 4, file H", [0x00000000, 0x01000000], [0x00000000, 0x00010000]],
    ["rank 4, file G", [0x00000000, 0x02000000], [0x00000000, 0x00020000]],
    ["rank 4, file F", [0x00000000, 0x04000000], [0x00000000, 0x00040000]],
    ["rank 4, file E", [0x00000000, 0x08000000], [0x00000000, 0x00080000]],
    ["rank 4, file D", [0x00000000, 0x10000000], [0x00000000, 0x00100000]],
    ["rank 4, file C", [0x00000000, 0x20000000], [0x00000000, 0x00200000]],
    ["rank 4, file B", [0x00000000, 0x40000000], [0x00000000, 0x00400000]],
    ["rank 4, file A", [0x00000000, 0x80000000], [0x00000000, 0x00800000]],
    ["rank 5, file H", [0x00000001, 0x00000000], [0x00000000, 0x01000000]],
    ["rank 5, file G", [0x00000002, 0x00000000], [0x00000000, 0x02000000]],
    ["rank 5, file F", [0x00000004, 0x00000000], [0x00000000, 0x04000000]],
    ["rank 5, file E", [0x00000008, 0x00000000], [0x00000000, 0x08000000]],
    ["rank 5, file D", [0x00000010, 0x00000000], [0x00000000, 0x10000000]],
    ["rank 5, file C", [0x00000020, 0x00000000], [0x00000000, 0x20000000]],
    ["rank 5, file B", [0x00000040, 0x00000000], [0x00000000, 0x40000000]],
    ["rank 5, file A", [0x00000080, 0x00000000], [0x00000000, 0x80000000]],
    ["rank 6, file H", [0x00000100, 0x00000000], [0x00000001, 0x00000000]],
    ["rank 6, file G", [0x00000200, 0x00000000], [0x00000002, 0x00000000]],
    ["rank 6, file F", [0x00000400, 0x00000000], [0x00000004, 0x00000000]],
    ["rank 6, file E", [0x00000800, 0x00000000], [0x00000008, 0x00000000]],
    ["rank 6, file D", [0x00001000, 0x00000000], [0x00000010, 0x00000000]],
    ["rank 6, file C", [0x00002000, 0x00000000], [0x00000020, 0x00000000]],
    ["rank 6, file B", [0x00004000, 0x00000000], [0x00000040, 0x00000000]],
    ["rank 6, file A", [0x00008000, 0x00000000], [0x00000080, 0x00000000]],
    ["rank 7, file H", [0x00010000, 0x00000000], [0x00000100, 0x00000000]],
    ["rank 7, file G", [0x00020000, 0x00000000], [0x00000200, 0x00000000]],
    ["rank 7, file F", [0x00040000, 0x00000000], [0x00000400, 0x00000000]],
    ["rank 7, file E", [0x00080000, 0x00000000], [0x00000800, 0x00000000]],
    ["rank 7, file D", [0x00100000, 0x00000000], [0x00001000, 0x00000000]],
    ["rank 7, file C", [0x00200000, 0x00000000], [0x00002000, 0x00000000]],
    ["rank 7, file B", [0x00400000, 0x00000000], [0x00004000, 0x00000000]],
    ["rank 7, file A", [0x00800000, 0x00000000], [0x00008000, 0x00000000]],
    ["rank 8, file H", [0x01000000, 0x00000000], [0x00010000, 0x00000000]],
    ["rank 8, file G", [0x02000000, 0x00000000], [0x00020000, 0x00000000]],
    ["rank 8, file F", [0x04000000, 0x00000000], [0x00040000, 0x00000000]],
    ["rank 8, file E", [0x08000000, 0x00000000], [0x00080000, 0x00000000]],
    ["rank 8, file D", [0x10000000, 0x00000000], [0x00100000, 0x00000000]],
    ["rank 8, file C", [0x20000000, 0x00000000], [0x00200000, 0x00000000]],
    ["rank 8, file B", [0x40000000, 0x00000000], [0x00400000, 0x00000000]],
    ["rank 8, file A", [0x80000000, 0x00000000], [0x00800000, 0x00000000]],
    ["everything", [0xffffffff, 0xffffffff], [0x00ffffff, 0xffffffff]],
  ];
  it.each(cases)("%s", (_, input, output) => {
    expect(getBottomSquare(input)).toEqual(output);
  });
});

function stringToBitboard(str: string): Bitboard {
  const splitted = str
    .split("\n")
    .map((line) => line.trim())
    .filter(Boolean);
  if (splitted.length !== 8) {
    throw new Error("invalid board string");
  }
  splitted.forEach((line) => {
    if (!line.match(/^[01]{8}$/)) {
      throw new Error("invalid board string");
    }
  });
  return [
    parseInt(splitted.slice(0, 4).join(""), 2),
    parseInt(splitted.slice(4, 8).join(""), 2),
  ];
}

describe("stringToBitboard", () => {
  it("should transform a string into a bitboard", () => {
    expect(
      stringToBitboard(`
        11111111
        11111111
        00000000
        00000000
        00000000
        00000000
        11111111
        11111111
      `)
    ).toEqual([
      0b11111111_11111111_00000000_00000000,
      0b00000000_00000000_11111111_11111111,
    ]);
    expect(
      stringToBitboard(`
        10000000
        01000000
        00100000
        00010000
        00001000
        00000100
        00000010
        00000001
      `)
    ).toEqual([
      0b10000000_01000000_00100000_00010000,
      0b00001000_00000100_00000010_00000001,
    ]);
    expect(
      stringToBitboard(`
        00000000
        00000000
        00000000
        00000000
        00000000
        00000000
        00000000
        00000000
      `)
    ).toEqual([
      0b00000000_00000000_00000000_00000000,
      0b00000000_00000000_00000000_00000000,
    ]);
    expect(
      stringToBitboard(`
        11111111
        11111111
        11111111
        11111111
        11111111
        11111111
        11111111
        11111111
      `)
    ).toEqual([
      0b11111111_11111111_11111111_11111111,
      0b11111111_11111111_11111111_11111111,
    ]);
  });
});

describe("getMoveableSqaresToLeft", () => {
  describe("when there are no pieces to the left", () => {
    it("should observe all squares", () => {
      expect(
        getMoveableSqaresToLeft(
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          11111111
          11111110
          11111100
          11111000
          11110000
          11100000
          11000000
          10000000
        `)
      );
    });
  });
  describe("when there is one own piece to the left", () => {
    it("should observe all squares up to the own piece", () => {
      expect(
        getMoveableSqaresToLeft(
          stringToBitboard(`
            01000001
            01000010
            00100100
            00101000
            01010000
            01100000
            11000000
            10000000
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00111111
          00111110
          00011100
          00011000
          00110000
          00100000
          01000000
          10000000
        `)
      );
    });
  });
  describe("when there are multiple own piece to the left", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getMoveableSqaresToLeft(
          stringToBitboard(`
            01001001
            01001010
            00101100
            00111000
            11010000
            11100000
            11000000
            10000000
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00000111
          00000110
          00000100
          00001000
          00110000
          00100000
          01000000
          10000000
        `)
      );
    });
  });
  describe("when there is one enemy piece to the left", () => {
    it("should observe all squares up to and including the enemy piece", () => {
      expect(
        getMoveableSqaresToLeft(
          stringToBitboard(`
            01000001
            01000010
            00100100
            00101000
            01010000
            01100000
            11000000
            10000000
          `),
          stringToBitboard(`
            01000000
            01000000
            00100000
            00100000
            01000000
            01000000
            10000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          01111111
          01111110
          00111100
          00111000
          01110000
          01100000
          11000000
          10000000
        `)
      );
    });
  });
  describe("when there are multiple enemy piece to the left", () => {
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getMoveableSqaresToLeft(
          stringToBitboard(`
            01001001
            01001010
            00101100
            00111000
            11010000
            11100000
            11000000
            10000000
          `),
          stringToBitboard(`
            01001000
            01001000
            00101000
            00110000
            11000000
            11000000
            10000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00001111
          00001110
          00001100
          00011000
          01110000
          01100000
          11000000
          10000000
        `)
      );
    });
  });
  describe("when there are own and enemy piece to the left", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getMoveableSqaresToLeft(
          stringToBitboard(`
            01001001
            01001010
            00101100
            00111000
            11010000
            11100000
            11000000
            10000000
          `),
          stringToBitboard(`
            01000000
            01000000
            00100000
            00100000
            10000000
            10000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00000111
          00000110
          00000100
          00001000
          00110000
          00100000
          01000000
          10000000
        `)
      );
    });
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getMoveableSqaresToLeft(
          stringToBitboard(`
            01001001
            01001010
            00101100
            00111000
            11010000
            11100000
            11000000
            10000000
          `),
          stringToBitboard(`
            00001000
            00001000
            00001000
            00010000
            01000000
            01000000
            10000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00001111
          00001110
          00001100
          00011000
          01110000
          01100000
          11000000
          10000000
        `)
      );
    });
  });
});

describe("getMoveableSqaresToRight", () => {
  describe("when there are no pieces to the right", () => {
    it("should observe all squares", () => {
      expect(
        getMoveableSqaresToRight(
          stringToBitboard(`
            00010000
            00100000
            01000000
            10000000
            00000001
            00000010
            00000100
            00001000
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00010000
            00100000
            01000000
            10000000
            00000001
            00000010
            00000100
            00001000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00011111
          00111111
          01111111
          11111111
          00000001
          00000011
          00000111
          00001111
        `)
      );
    });
  });
  describe("when there is one own piece to the right", () => {
    it("should observe all squares up to the own piece", () => {
      expect(
        getMoveableSqaresToRight(
          stringToBitboard(`
            00010100
            00100100
            01000010
            10000010
            00000001
            00000011
            00000110
            00001010
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00010000
            00100000
            01000000
            10000000
            00000001
            00000010
            00000100
            00001000
          `)
        )
      ).toEqual(
        stringToBitboard(`
        00011000
        00111000
        01111100
        11111100
        00000001
        00000010
        00000100
        00001100
        `)
      );
    });
  });
  describe("when there are multiple own piece to the right", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getMoveableSqaresToRight(
          stringToBitboard(`
            00011100
            00110100
            01010010
            10010010
            00000001
            00000011
            00000111
            00001011
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00010000
            00100000
            01000000
            10000000
            00000001
            00000010
            00000100
            00001000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00010000
          00100000
          01100000
          11100000
          00000001
          00000010
          00000100
          00001100
        `)
      );
    });
  });
  describe("when there is one enemy piece to the right", () => {
    it("should observe all squares up to and including the enemy piece", () => {
      expect(
        getMoveableSqaresToRight(
          stringToBitboard(`
            00010100
            00100100
            01000010
            10000010
            00000001
            00000011
            00000110
            00001010
          `),
          stringToBitboard(`
            00000100
            00000100
            00000010
            00000010
            00000000
            00000001
            00000010
            00000010
          `),
          stringToBitboard(`
            00010000
            00100000
            01000000
            10000000
            00000001
            00000010
            00000100
            00001000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00011100
          00111100
          01111110
          11111110
          00000001
          00000011
          00000110
          00001110
        `)
      );
    });
  });
  describe("when there are multiple enemy piece to the right", () => {
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getMoveableSqaresToRight(
          stringToBitboard(`
            00011100
            00110100
            01010010
            10010010
            00000001
            00000011
            00000111
            00001011
          `),
          stringToBitboard(`
            00001100
            00010100
            00010010
            00010010
            00000000
            00000001
            00000011
            00000011
          `),
          stringToBitboard(`
            00010000
            00100000
            01000000
            10000000
            00000001
            00000010
            00000100
            00001000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00011000
          00110000
          01110000
          11110000
          00000001
          00000011
          00000110
          00001110
        `)
      );
    });
  });
  describe("when there are own and enemy piece to the right", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getMoveableSqaresToRight(
          stringToBitboard(`
            00011100
            00110100
            01010010
            10010010
            00000001
            00000011
            00000111
            00001011
          `),
          stringToBitboard(`
            00000100
            00000100
            00000010
            00000010
            00000000
            00000000
            00000001
            00000001
          `),
          stringToBitboard(`
            00010000
            00100000
            01000000
            10000000
            00000001
            00000010
            00000100
            00001000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00010000
          00100000
          01100000
          11100000
          00000001
          00000010
          00000100
          00001100
        `)
      );
    });
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getMoveableSqaresToRight(
          stringToBitboard(`
            00011100
            00110100
            01010010
            10010010
            00000001
            00000011
            00000111
            00001011
          `),
          stringToBitboard(`
            00001000
            00010000
            00010000
            00010000
            00000000
            00000001
            00000010
            00000010
          `),
          stringToBitboard(`
            00010000
            00100000
            01000000
            10000000
            00000001
            00000010
            00000100
            00001000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00011000
          00110000
          01110000
          11110000
          00000001
          00000011
          00000110
          00001110
        `)
      );
    });
  });
});

describe("getMoveableSqaresToTop", () => {
  describe("when there are no pieces to the top", () => {
    it("should observe all squares", () => {
      expect(
        getMoveableSqaresToTop(
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          11111111
          11111110
          11111100
          11111000
          11110000
          11100000
          11000000
          10000000
        `)
      );
    });
  });
  describe("when there is one own piece to the top", () => {
    it("should observe all squares up to the own piece", () => {
      expect(
        getMoveableSqaresToTop(
          stringToBitboard(`
            00000011
            11001110
            00110100
            00001000
            00010000
            00100000
            01000000
            10000000
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00000001
          00000010
          11001100
          11111000
          11110000
          11100000
          11000000
          10000000
        `)
      );
    });
  });
  describe("when there are multiple own piece to the top", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getMoveableSqaresToTop(
          stringToBitboard(`
            00001111
            11001110
            00110100
            00011000
            11110000
            00100000
            01000000
            10000000
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00000001
          00000010
          00001100
          00001000
          00010000
          11100000
          11000000
          10000000
        `)
      );
    });
  });
  describe("when there is one enemy piece to the top", () => {
    it("should observe all squares up to and including the enemy piece", () => {
      expect(
        getMoveableSqaresToTop(
          stringToBitboard(`
            00000011
            11001110
            00110100
            00001000
            00010000
            00100000
            01000000
            10000000
          `),
          stringToBitboard(`
            00000010
            11001100
            00110000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
        00000011
        11001110
        11111100
        11111000
        11110000
        11100000
        11000000
        10000000
        `)
      );
    });
  });
  describe("when there are multiple enemy piece to the top", () => {
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getMoveableSqaresToTop(
          stringToBitboard(`
            00001111
            11001110
            00110100
            00011000
            11110000
            00100000
            01000000
            10000000
          `),
          stringToBitboard(`
            00001110
            11001100
            00110000
            00010000
            11100000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00000011
          00001110
          00001100
          00011000
          11110000
          11100000
          11000000
          10000000
        `)
      );
    });
  });
  describe("when there are own and enemy piece to the top", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getMoveableSqaresToTop(
          stringToBitboard(`
            00001111
            11001110
            00110100
            00011000
            11110000
            00100000
            01000000
            10000000
          `),
          stringToBitboard(`
            00001100
            11000000
            00110000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00000001
          00000010
          00001100
          00001000
          00010000
          11100000
          11000000
          10000000
        `)
      );
    });
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getMoveableSqaresToTop(
          stringToBitboard(`
            00001111
            11001110
            00110100
            00011000
            11110000
            00100000
            01000000
            10000000
          `),
          stringToBitboard(`
            00000010
            00001100
            00000000
            00010000
            11100000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          00000011
          00001110
          00001100
          00011000
          11110000
          11100000
          11000000
          10000000
        `)
      );
    });
  });
});

describe("getMoveableSqaresToBottom", () => {
  describe("when there are no pieces to the bottom", () => {
    it("should observe all squares", () => {
      expect(
        getMoveableSqaresToBottom(
          stringToBitboard(`
            10000000
            01000000
            00100000
            00010000
            00001000
            00000100
            00000010
            00000001
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            10000000
            01000000
            00100000
            00010000
            00001000
            00000100
            00000010
            00000001
          `)
        )
      ).toEqual(
        stringToBitboard(`
        10000000
        11000000
        11100000
        11110000
        11111000
        11111100
        11111110
        11111111
        `)
      );
    });
  });
  describe("when there is one own piece to the bottom", () => {
    it("should observe all squares up to the own piece", () => {
      expect(
        getMoveableSqaresToBottom(
          stringToBitboard(`
            10000000
            01000000
            00100000
            00010000
            00001000
            00110100
            11001110
            00000011
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            10000000
            01000000
            00100000
            00010000
            00001000
            00000100
            00000010
            00000001
          `)
        )
      ).toEqual(
        stringToBitboard(`
          10000000
          11000000
          11100000
          11110000
          11111000
          11001100
          00000010
          00000001
        `)
      );
    });
  });
  describe("when there are multiple own piece to the bottom", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getMoveableSqaresToBottom(
          stringToBitboard(`
            10000000
            01000000
            00100000
            11110000
            00011000
            00110100
            11001110
            00001111
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            10000000
            01000000
            00100000
            00010000
            00001000
            00000100
            00000010
            00000001
          `)
        )
      ).toEqual(
        stringToBitboard(`
          10000000
          11000000
          11100000
          00010000
          00001000
          00001100
          00000010
          00000001
        `)
      );
    });
  });
  describe("when there is one enemy piece to the bottom", () => {
    it("should observe all squares up to and including the enemy piece", () => {
      expect(
        getMoveableSqaresToBottom(
          stringToBitboard(`
            10000000
            01000000
            00100000
            00010000
            00001000
            00110100
            11001110
            00000011
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00110000
            11001100
            00000010
          `),
          stringToBitboard(`
            10000000
            01000000
            00100000
            00010000
            00001000
            00000100
            00000010
            00000001
          `)
        )
      ).toEqual(
        stringToBitboard(`
          10000000
          11000000
          11100000
          11110000
          11111000
          11111100
          11001110
          00000011
        `)
      );
    });
  });
  describe("when there are multiple enemy piece to the bottom", () => {
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getMoveableSqaresToBottom(
          stringToBitboard(`
            10000000
            01000000
            00100000
            11110000
            00011000
            00110100
            11001110
            00001111
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            11100000
            00010000
            00110000
            11001100
            00001110
          `),
          stringToBitboard(`
            10000000
            01000000
            00100000
            00010000
            00001000
            00000100
            00000010
            00000001
          `)
        )
      ).toEqual(
        stringToBitboard(`
          10000000
          11000000
          11100000
          11110000
          00011000
          00001100
          00001110
          00000011
        `)
      );
    });
  });
  describe("when there are own and enemy piece to the bottom", () => {
    it("should observe all squares up to the first own piece", () => {
      expect(
        getMoveableSqaresToBottom(
          stringToBitboard(`
            10000000
            01000000
            00100000
            11110000
            00011000
            00110100
            11001110
            00001111
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00110000
            11000000
            00001100
          `),
          stringToBitboard(`
            10000000
            01000000
            00100000
            00010000
            00001000
            00000100
            00000010
            00000001
          `)
        )
      ).toEqual(
        stringToBitboard(`
          10000000
          11000000
          11100000
          00010000
          00001000
          00001100
          00000010
          00000001
        `)
      );
    });
    it("should observe all squares up to and including the first enemy piece", () => {
      expect(
        getMoveableSqaresToBottom(
          stringToBitboard(`
            10000000
            01000000
            00100000
            11110000
            00011000
            00110100
            11001110
            00001111
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            11100000
            00010000
            00000000
            00001100
            00000010
          `),
          stringToBitboard(`
            10000000
            01000000
            00100000
            00010000
            00001000
            00000100
            00000010
            00000001
          `)
        )
      ).toEqual(
        stringToBitboard(`
          10000000
          11000000
          11100000
          11110000
          00011000
          00001100
          00001110
          00000011
        `)
      );
    });
  });
});

describe("getMoveableSqaresToTopLeft", () => {
  describe("when there are no pieces to the top left", () => {
    it("should observe all squares", () => {
      expect(
        getMoveableSqaresToTopLeft(
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000010
            00000100
            00001000
            00010000
            00100000
            01000000
            10000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          01010101
          10101010
          01010100
          10101000
          01010000
          10100000
          01000000
          10000000
        `)
      );
      expect(
        getMoveableSqaresToTopLeft(
          stringToBitboard(`
            00000001
            00000011
            00000110
            00001100
            00011000
            00110000
            01100000
            11000000
          `),
          stringToBitboard(`
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
            00000000
          `),
          stringToBitboard(`
            00000001
            00000011
            00000110
            00001100
            00011000
            00110000
            01100000
            11000000
          `)
        )
      ).toEqual(
        stringToBitboard(`
          11111111
          11111111
          11111110
          11111100
          11111000
          11110000
          11100000
          11000000
        `)
      );
    });
  });
});
