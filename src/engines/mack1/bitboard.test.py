from bitboard import (
    get_left_square,
    get_right_square,
    get_top_square,
    get_bottom_square,
)
import re
import unittest


def string_to_bitboard(string: str) -> int:
    binary = ""
    for line in string.split("\n"):
        binary += line.strip()

    regex = re.compile("^[01]{64}$")
    if not regex.match(binary):
        raise Exception("invalid board string")

    return int(binary, 2)


class TestBitboard(unittest.TestCase):
    def test_string_to_bitboard(self):
        self.assertEqual(
            string_to_bitboard(
                """
                    11111111
                    11111111
                    00000000
                    00000000
                    00000000
                    00000000
                    11111111
                    11111111
                """
            ),
            0b11111111_11111111_00000000_00000000_00000000_00000000_11111111_11111111,
        )
        self.assertEqual(
            string_to_bitboard(
                """
                    10000000
                    01000000
                    00100000
                    00010000
                    00001000
                    00000100
                    00000010
                    00000001
                """
            ),
            0b10000000_01000000_00100000_00010000_00001000_00000100_00000010_00000001,
        )
        self.assertEqual(
            string_to_bitboard(
                """
                    00000000
                    00000000
                    00000000
                    00000000
                    00000000
                    00000000
                    00000000
                    00000000
                """
            ),
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
        )
        self.assertEqual(
            string_to_bitboard(
                """
                    11111111
                    11111111
                    11111111
                    11111111
                    11111111
                    11111111
                    11111111
                    11111111
                """
            ),
            0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111,
        )

    def test_get_left_square(self):
        cases = [
            (0x0000_0000_0000_0000, 0x0000_0000_0000_0000),  # null
            (0x0000_0000_0000_0001, 0x0000_0000_0000_0002),  # rank 1, file H
            (0x0000_0000_0000_0002, 0x0000_0000_0000_0004),  # rank 1, file G
            (0x0000_0000_0000_0004, 0x0000_0000_0000_0008),  # rank 1, file F
            (0x0000_0000_0000_0008, 0x0000_0000_0000_0010),  # rank 1, file E
            (0x0000_0000_0000_0010, 0x0000_0000_0000_0020),  # rank 1, file D
            (0x0000_0000_0000_0020, 0x0000_0000_0000_0040),  # rank 1, file C
            (0x0000_0000_0000_0040, 0x0000_0000_0000_0080),  # rank 1, file B
            (0x0000_0000_0000_0080, 0x0000_0000_0000_0000),  # rank 1, file A
            (0x0000_0000_0000_0100, 0x0000_0000_0000_0200),  # rank 2, file H
            (0x0000_0000_0000_0200, 0x0000_0000_0000_0400),  # rank 2, file G
            (0x0000_0000_0000_0400, 0x0000_0000_0000_0800),  # rank 2, file F
            (0x0000_0000_0000_0800, 0x0000_0000_0000_1000),  # rank 2, file E
            (0x0000_0000_0000_1000, 0x0000_0000_0000_2000),  # rank 2, file D
            (0x0000_0000_0000_2000, 0x0000_0000_0000_4000),  # rank 2, file C
            (0x0000_0000_0000_4000, 0x0000_0000_0000_8000),  # rank 2, file B
            (0x0000_0000_0000_8000, 0x0000_0000_0000_0000),  # rank 2, file A
            (0x0000_0000_0001_0000, 0x0000_0000_0002_0000),  # rank 3, file H
            (0x0000_0000_0002_0000, 0x0000_0000_0004_0000),  # rank 3, file G
            (0x0000_0000_0004_0000, 0x0000_0000_0008_0000),  # rank 3, file F
            (0x0000_0000_0008_0000, 0x0000_0000_0010_0000),  # rank 3, file E
            (0x0000_0000_0010_0000, 0x0000_0000_0020_0000),  # rank 3, file D
            (0x0000_0000_0020_0000, 0x0000_0000_0040_0000),  # rank 3, file C
            (0x0000_0000_0040_0000, 0x0000_0000_0080_0000),  # rank 3, file B
            (0x0000_0000_0080_0000, 0x0000_0000_0000_0000),  # rank 3, file A
            (0x0000_0000_0100_0000, 0x0000_0000_0200_0000),  # rank 4, file H
            (0x0000_0000_0200_0000, 0x0000_0000_0400_0000),  # rank 4, file G
            (0x0000_0000_0400_0000, 0x0000_0000_0800_0000),  # rank 4, file F
            (0x0000_0000_0800_0000, 0x0000_0000_1000_0000),  # rank 4, file E
            (0x0000_0000_1000_0000, 0x0000_0000_2000_0000),  # rank 4, file D
            (0x0000_0000_2000_0000, 0x0000_0000_4000_0000),  # rank 4, file C
            (0x0000_0000_4000_0000, 0x0000_0000_8000_0000),  # rank 4, file B
            (0x0000_0000_8000_0000, 0x0000_0000_0000_0000),  # rank 4, file A
            (0x0000_0001_0000_0000, 0x0000_0002_0000_0000),  # rank 5, file H
            (0x0000_0002_0000_0000, 0x0000_0004_0000_0000),  # rank 5, file G
            (0x0000_0004_0000_0000, 0x0000_0008_0000_0000),  # rank 5, file F
            (0x0000_0008_0000_0000, 0x0000_0010_0000_0000),  # rank 5, file E
            (0x0000_0010_0000_0000, 0x0000_0020_0000_0000),  # rank 5, file D
            (0x0000_0020_0000_0000, 0x0000_0040_0000_0000),  # rank 5, file C
            (0x0000_0040_0000_0000, 0x0000_0080_0000_0000),  # rank 5, file B
            (0x0000_0080_0000_0000, 0x0000_0000_0000_0000),  # rank 5, file A
            (0x0000_0100_0000_0000, 0x0000_0200_0000_0000),  # rank 6, file H
            (0x0000_0200_0000_0000, 0x0000_0400_0000_0000),  # rank 6, file G
            (0x0000_0400_0000_0000, 0x0000_0800_0000_0000),  # rank 6, file F
            (0x0000_0800_0000_0000, 0x0000_1000_0000_0000),  # rank 6, file E
            (0x0000_1000_0000_0000, 0x0000_2000_0000_0000),  # rank 6, file D
            (0x0000_2000_0000_0000, 0x0000_4000_0000_0000),  # rank 6, file C
            (0x0000_4000_0000_0000, 0x0000_8000_0000_0000),  # rank 6, file B
            (0x0000_8000_0000_0000, 0x0000_0000_0000_0000),  # rank 6, file A
            (0x0001_0000_0000_0000, 0x0002_0000_0000_0000),  # rank 7, file H
            (0x0002_0000_0000_0000, 0x0004_0000_0000_0000),  # rank 7, file G
            (0x0004_0000_0000_0000, 0x0008_0000_0000_0000),  # rank 7, file F
            (0x0008_0000_0000_0000, 0x0010_0000_0000_0000),  # rank 7, file E
            (0x0010_0000_0000_0000, 0x0020_0000_0000_0000),  # rank 7, file D
            (0x0020_0000_0000_0000, 0x0040_0000_0000_0000),  # rank 7, file C
            (0x0040_0000_0000_0000, 0x0080_0000_0000_0000),  # rank 7, file B
            (0x0080_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 7, file A
            (0x0100_0000_0000_0000, 0x0200_0000_0000_0000),  # rank 8, file H
            (0x0200_0000_0000_0000, 0x0400_0000_0000_0000),  # rank 8, file G
            (0x0400_0000_0000_0000, 0x0800_0000_0000_0000),  # rank 8, file F
            (0x0800_0000_0000_0000, 0x1000_0000_0000_0000),  # rank 8, file E
            (0x1000_0000_0000_0000, 0x2000_0000_0000_0000),  # rank 8, file D
            (0x2000_0000_0000_0000, 0x4000_0000_0000_0000),  # rank 8, file C
            (0x4000_0000_0000_0000, 0x8000_0000_0000_0000),  # rank 8, file B
            (0x8000_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file A
            (0xFFFF_FFFF_FFFF_FFFF, 0xFEFE_FEFE_FEFE_FEFE),  # everything
        ]
        for input_bitboard, output_bitboard in cases:
            self.assertEqual(get_left_square(input_bitboard), output_bitboard)

    def test_get_right_square(self):
        cases = [
            (0x0000_0000_0000_0000, 0x0000_0000_0000_0000),  # null
            (0x0000_0000_0000_0001, 0x0000_0000_0000_0000),  # rank 1, file H
            (0x0000_0000_0000_0002, 0x0000_0000_0000_0001),  # rank 1, file G
            (0x0000_0000_0000_0004, 0x0000_0000_0000_0002),  # rank 1, file F
            (0x0000_0000_0000_0008, 0x0000_0000_0000_0004),  # rank 1, file E
            (0x0000_0000_0000_0010, 0x0000_0000_0000_0008),  # rank 1, file D
            (0x0000_0000_0000_0020, 0x0000_0000_0000_0010),  # rank 1, file C
            (0x0000_0000_0000_0040, 0x0000_0000_0000_0020),  # rank 1, file B
            (0x0000_0000_0000_0080, 0x0000_0000_0000_0040),  # rank 1, file A
            (0x0000_0000_0000_0100, 0x0000_0000_0000_0000),  # rank 2, file H
            (0x0000_0000_0000_0200, 0x0000_0000_0000_0100),  # rank 2, file G
            (0x0000_0000_0000_0400, 0x0000_0000_0000_0200),  # rank 2, file F
            (0x0000_0000_0000_0800, 0x0000_0000_0000_0400),  # rank 2, file E
            (0x0000_0000_0000_1000, 0x0000_0000_0000_0800),  # rank 2, file D
            (0x0000_0000_0000_2000, 0x0000_0000_0000_1000),  # rank 2, file C
            (0x0000_0000_0000_4000, 0x0000_0000_0000_2000),  # rank 2, file B
            (0x0000_0000_0000_8000, 0x0000_0000_0000_4000),  # rank 2, file A
            (0x0000_0000_0001_0000, 0x0000_0000_0000_0000),  # rank 3, file H
            (0x0000_0000_0002_0000, 0x0000_0000_0001_0000),  # rank 3, file G
            (0x0000_0000_0004_0000, 0x0000_0000_0002_0000),  # rank 3, file F
            (0x0000_0000_0008_0000, 0x0000_0000_0004_0000),  # rank 3, file E
            (0x0000_0000_0010_0000, 0x0000_0000_0008_0000),  # rank 3, file D
            (0x0000_0000_0020_0000, 0x0000_0000_0010_0000),  # rank 3, file C
            (0x0000_0000_0040_0000, 0x0000_0000_0020_0000),  # rank 3, file B
            (0x0000_0000_0080_0000, 0x0000_0000_0040_0000),  # rank 3, file A
            (0x0000_0000_0100_0000, 0x0000_0000_0000_0000),  # rank 4, file H
            (0x0000_0000_0200_0000, 0x0000_0000_0100_0000),  # rank 4, file G
            (0x0000_0000_0400_0000, 0x0000_0000_0200_0000),  # rank 4, file F
            (0x0000_0000_0800_0000, 0x0000_0000_0400_0000),  # rank 4, file E
            (0x0000_0000_1000_0000, 0x0000_0000_0800_0000),  # rank 4, file D
            (0x0000_0000_2000_0000, 0x0000_0000_1000_0000),  # rank 4, file C
            (0x0000_0000_4000_0000, 0x0000_0000_2000_0000),  # rank 4, file B
            (0x0000_0000_8000_0000, 0x0000_0000_4000_0000),  # rank 4, file A
            (0x0000_0001_0000_0000, 0x0000_0000_0000_0000),  # rank 5, file H
            (0x0000_0002_0000_0000, 0x0000_0001_0000_0000),  # rank 5, file G
            (0x0000_0004_0000_0000, 0x0000_0002_0000_0000),  # rank 5, file F
            (0x0000_0008_0000_0000, 0x0000_0004_0000_0000),  # rank 5, file E
            (0x0000_0010_0000_0000, 0x0000_0008_0000_0000),  # rank 5, file D
            (0x0000_0020_0000_0000, 0x0000_0010_0000_0000),  # rank 5, file C
            (0x0000_0040_0000_0000, 0x0000_0020_0000_0000),  # rank 5, file B
            (0x0000_0080_0000_0000, 0x0000_0040_0000_0000),  # rank 5, file A
            (0x0000_0100_0000_0000, 0x0000_0000_0000_0000),  # rank 6, file H
            (0x0000_0200_0000_0000, 0x0000_0100_0000_0000),  # rank 6, file G
            (0x0000_0400_0000_0000, 0x0000_0200_0000_0000),  # rank 6, file F
            (0x0000_0800_0000_0000, 0x0000_0400_0000_0000),  # rank 6, file E
            (0x0000_1000_0000_0000, 0x0000_0800_0000_0000),  # rank 6, file D
            (0x0000_2000_0000_0000, 0x0000_1000_0000_0000),  # rank 6, file C
            (0x0000_4000_0000_0000, 0x0000_2000_0000_0000),  # rank 6, file B
            (0x0000_8000_0000_0000, 0x0000_4000_0000_0000),  # rank 6, file A
            (0x0001_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 7, file H
            (0x0002_0000_0000_0000, 0x0001_0000_0000_0000),  # rank 7, file G
            (0x0004_0000_0000_0000, 0x0002_0000_0000_0000),  # rank 7, file F
            (0x0008_0000_0000_0000, 0x0004_0000_0000_0000),  # rank 7, file E
            (0x0010_0000_0000_0000, 0x0008_0000_0000_0000),  # rank 7, file D
            (0x0020_0000_0000_0000, 0x0010_0000_0000_0000),  # rank 7, file C
            (0x0040_0000_0000_0000, 0x0020_0000_0000_0000),  # rank 7, file B
            (0x0080_0000_0000_0000, 0x0040_0000_0000_0000),  # rank 7, file A
            (0x0100_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file H
            (0x0200_0000_0000_0000, 0x0100_0000_0000_0000),  # rank 8, file G
            (0x0400_0000_0000_0000, 0x0200_0000_0000_0000),  # rank 8, file F
            (0x0800_0000_0000_0000, 0x0400_0000_0000_0000),  # rank 8, file E
            (0x1000_0000_0000_0000, 0x0800_0000_0000_0000),  # rank 8, file D
            (0x2000_0000_0000_0000, 0x1000_0000_0000_0000),  # rank 8, file C
            (0x4000_0000_0000_0000, 0x2000_0000_0000_0000),  # rank 8, file B
            (0x8000_0000_0000_0000, 0x4000_0000_0000_0000),  # rank 8, file A
            (0xFFFF_FFFF_FFFF_FFFF, 0x7F7F_7F7F_7F7F_7F7F),  # everything
        ]
        for input_bitboard, output_bitboard in cases:
            self.assertEqual(get_right_square(input_bitboard), output_bitboard)

    def test_get_top_square(self):
        cases = [
            (0x0000_0000_0000_0000, 0x0000_0000_0000_0000),  # null
            (0x0000_0000_0000_0001, 0x0000_0000_0000_0100),  # rank 1, file H
            (0x0000_0000_0000_0002, 0x0000_0000_0000_0200),  # rank 1, file G
            (0x0000_0000_0000_0004, 0x0000_0000_0000_0400),  # rank 1, file F
            (0x0000_0000_0000_0008, 0x0000_0000_0000_0800),  # rank 1, file E
            (0x0000_0000_0000_0010, 0x0000_0000_0000_1000),  # rank 1, file D
            (0x0000_0000_0000_0020, 0x0000_0000_0000_2000),  # rank 1, file C
            (0x0000_0000_0000_0040, 0x0000_0000_0000_4000),  # rank 1, file B
            (0x0000_0000_0000_0080, 0x0000_0000_0000_8000),  # rank 1, file A
            (0x0000_0000_0000_0100, 0x0000_0000_0001_0000),  # rank 2, file H
            (0x0000_0000_0000_0200, 0x0000_0000_0002_0000),  # rank 2, file G
            (0x0000_0000_0000_0400, 0x0000_0000_0004_0000),  # rank 2, file F
            (0x0000_0000_0000_0800, 0x0000_0000_0008_0000),  # rank 2, file E
            (0x0000_0000_0000_1000, 0x0000_0000_0010_0000),  # rank 2, file D
            (0x0000_0000_0000_2000, 0x0000_0000_0020_0000),  # rank 2, file C
            (0x0000_0000_0000_4000, 0x0000_0000_0040_0000),  # rank 2, file B
            (0x0000_0000_0000_8000, 0x0000_0000_0080_0000),  # rank 2, file A
            (0x0000_0000_0001_0000, 0x0000_0000_0100_0000),  # rank 3, file H
            (0x0000_0000_0002_0000, 0x0000_0000_0200_0000),  # rank 3, file G
            (0x0000_0000_0004_0000, 0x0000_0000_0400_0000),  # rank 3, file F
            (0x0000_0000_0008_0000, 0x0000_0000_0800_0000),  # rank 3, file E
            (0x0000_0000_0010_0000, 0x0000_0000_1000_0000),  # rank 3, file D
            (0x0000_0000_0020_0000, 0x0000_0000_2000_0000),  # rank 3, file C
            (0x0000_0000_0040_0000, 0x0000_0000_4000_0000),  # rank 3, file B
            (0x0000_0000_0080_0000, 0x0000_0000_8000_0000),  # rank 3, file A
            (0x0000_0000_0100_0000, 0x0000_0001_0000_0000),  # rank 4, file H
            (0x0000_0000_0200_0000, 0x0000_0002_0000_0000),  # rank 4, file G
            (0x0000_0000_0400_0000, 0x0000_0004_0000_0000),  # rank 4, file F
            (0x0000_0000_0800_0000, 0x0000_0008_0000_0000),  # rank 4, file E
            (0x0000_0000_1000_0000, 0x0000_0010_0000_0000),  # rank 4, file D
            (0x0000_0000_2000_0000, 0x0000_0020_0000_0000),  # rank 4, file C
            (0x0000_0000_4000_0000, 0x0000_0040_0000_0000),  # rank 4, file B
            (0x0000_0000_8000_0000, 0x0000_0080_0000_0000),  # rank 4, file A
            (0x0000_0001_0000_0000, 0x0000_0100_0000_0000),  # rank 5, file H
            (0x0000_0002_0000_0000, 0x0000_0200_0000_0000),  # rank 5, file G
            (0x0000_0004_0000_0000, 0x0000_0400_0000_0000),  # rank 5, file F
            (0x0000_0008_0000_0000, 0x0000_0800_0000_0000),  # rank 5, file E
            (0x0000_0010_0000_0000, 0x0000_1000_0000_0000),  # rank 5, file D
            (0x0000_0020_0000_0000, 0x0000_2000_0000_0000),  # rank 5, file C
            (0x0000_0040_0000_0000, 0x0000_4000_0000_0000),  # rank 5, file B
            (0x0000_0080_0000_0000, 0x0000_8000_0000_0000),  # rank 5, file A
            (0x0000_0100_0000_0000, 0x0001_0000_0000_0000),  # rank 6, file H
            (0x0000_0200_0000_0000, 0x0002_0000_0000_0000),  # rank 6, file G
            (0x0000_0400_0000_0000, 0x0004_0000_0000_0000),  # rank 6, file F
            (0x0000_0800_0000_0000, 0x0008_0000_0000_0000),  # rank 6, file E
            (0x0000_1000_0000_0000, 0x0010_0000_0000_0000),  # rank 6, file D
            (0x0000_2000_0000_0000, 0x0020_0000_0000_0000),  # rank 6, file C
            (0x0000_4000_0000_0000, 0x0040_0000_0000_0000),  # rank 6, file B
            (0x0000_8000_0000_0000, 0x0080_0000_0000_0000),  # rank 6, file A
            (0x0001_0000_0000_0000, 0x0100_0000_0000_0000),  # rank 7, file H
            (0x0002_0000_0000_0000, 0x0200_0000_0000_0000),  # rank 7, file G
            (0x0004_0000_0000_0000, 0x0400_0000_0000_0000),  # rank 7, file F
            (0x0008_0000_0000_0000, 0x0800_0000_0000_0000),  # rank 7, file E
            (0x0010_0000_0000_0000, 0x1000_0000_0000_0000),  # rank 7, file D
            (0x0020_0000_0000_0000, 0x2000_0000_0000_0000),  # rank 7, file C
            (0x0040_0000_0000_0000, 0x4000_0000_0000_0000),  # rank 7, file B
            (0x0080_0000_0000_0000, 0x8000_0000_0000_0000),  # rank 7, file A
            (0x0100_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file H
            (0x0200_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file G
            (0x0400_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file F
            (0x0800_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file E
            (0x1000_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file D
            (0x2000_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file C
            (0x4000_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file B
            (0x8000_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file A
            (0xFFFF_FFFF_FFFF_FFFF, 0xFFFF_FFFF_FFFF_FF00),  # everything
        ]
        for input_bitboard, output_bitboard in cases:
            self.assertEqual(get_top_square(input_bitboard), output_bitboard)

    def test_get_bottom_square(self):
        cases = [
            (0x0000_0000_0000_0000, 0x0000_0000_0000_0000),  # null
            (0x0000_0000_0000_0001, 0x0000_0000_0000_0000),  # rank 1, file H
            (0x0000_0000_0000_0002, 0x0000_0000_0000_0000),  # rank 1, file G
            (0x0000_0000_0000_0004, 0x0000_0000_0000_0000),  # rank 1, file F
            (0x0000_0000_0000_0008, 0x0000_0000_0000_0000),  # rank 1, file E
            (0x0000_0000_0000_0010, 0x0000_0000_0000_0000),  # rank 1, file D
            (0x0000_0000_0000_0020, 0x0000_0000_0000_0000),  # rank 1, file C
            (0x0000_0000_0000_0040, 0x0000_0000_0000_0000),  # rank 1, file B
            (0x0000_0000_0000_0080, 0x0000_0000_0000_0000),  # rank 1, file A
            (0x0000_0000_0000_0100, 0x0000_0000_0000_0001),  # rank 2, file H
            (0x0000_0000_0000_0200, 0x0000_0000_0000_0002),  # rank 2, file G
            (0x0000_0000_0000_0400, 0x0000_0000_0000_0004),  # rank 2, file F
            (0x0000_0000_0000_0800, 0x0000_0000_0000_0008),  # rank 2, file E
            (0x0000_0000_0000_1000, 0x0000_0000_0000_0010),  # rank 2, file D
            (0x0000_0000_0000_2000, 0x0000_0000_0000_0020),  # rank 2, file C
            (0x0000_0000_0000_4000, 0x0000_0000_0000_0040),  # rank 2, file B
            (0x0000_0000_0000_8000, 0x0000_0000_0000_0080),  # rank 2, file A
            (0x0000_0000_0001_0000, 0x0000_0000_0000_0100),  # rank 3, file H
            (0x0000_0000_0002_0000, 0x0000_0000_0000_0200),  # rank 3, file G
            (0x0000_0000_0004_0000, 0x0000_0000_0000_0400),  # rank 3, file F
            (0x0000_0000_0008_0000, 0x0000_0000_0000_0800),  # rank 3, file E
            (0x0000_0000_0010_0000, 0x0000_0000_0000_1000),  # rank 3, file D
            (0x0000_0000_0020_0000, 0x0000_0000_0000_2000),  # rank 3, file C
            (0x0000_0000_0040_0000, 0x0000_0000_0000_4000),  # rank 3, file B
            (0x0000_0000_0080_0000, 0x0000_0000_0000_8000),  # rank 3, file A
            (0x0000_0000_0100_0000, 0x0000_0000_0001_0000),  # rank 4, file H
            (0x0000_0000_0200_0000, 0x0000_0000_0002_0000),  # rank 4, file G
            (0x0000_0000_0400_0000, 0x0000_0000_0004_0000),  # rank 4, file F
            (0x0000_0000_0800_0000, 0x0000_0000_0008_0000),  # rank 4, file E
            (0x0000_0000_1000_0000, 0x0000_0000_0010_0000),  # rank 4, file D
            (0x0000_0000_2000_0000, 0x0000_0000_0020_0000),  # rank 4, file C
            (0x0000_0000_4000_0000, 0x0000_0000_0040_0000),  # rank 4, file B
            (0x0000_0000_8000_0000, 0x0000_0000_0080_0000),  # rank 4, file A
            (0x0000_0001_0000_0000, 0x0000_0000_0100_0000),  # rank 5, file H
            (0x0000_0002_0000_0000, 0x0000_0000_0200_0000),  # rank 5, file G
            (0x0000_0004_0000_0000, 0x0000_0000_0400_0000),  # rank 5, file F
            (0x0000_0008_0000_0000, 0x0000_0000_0800_0000),  # rank 5, file E
            (0x0000_0010_0000_0000, 0x0000_0000_1000_0000),  # rank 5, file D
            (0x0000_0020_0000_0000, 0x0000_0000_2000_0000),  # rank 5, file C
            (0x0000_0040_0000_0000, 0x0000_0000_4000_0000),  # rank 5, file B
            (0x0000_0080_0000_0000, 0x0000_0000_8000_0000),  # rank 5, file A
            (0x0000_0100_0000_0000, 0x0000_0001_0000_0000),  # rank 6, file H
            (0x0000_0200_0000_0000, 0x0000_0002_0000_0000),  # rank 6, file G
            (0x0000_0400_0000_0000, 0x0000_0004_0000_0000),  # rank 6, file F
            (0x0000_0800_0000_0000, 0x0000_0008_0000_0000),  # rank 6, file E
            (0x0000_1000_0000_0000, 0x0000_0010_0000_0000),  # rank 6, file D
            (0x0000_2000_0000_0000, 0x0000_0020_0000_0000),  # rank 6, file C
            (0x0000_4000_0000_0000, 0x0000_0040_0000_0000),  # rank 6, file B
            (0x0000_8000_0000_0000, 0x0000_0080_0000_0000),  # rank 6, file A
            (0x0001_0000_0000_0000, 0x0000_0100_0000_0000),  # rank 7, file H
            (0x0002_0000_0000_0000, 0x0000_0200_0000_0000),  # rank 7, file G
            (0x0004_0000_0000_0000, 0x0000_0400_0000_0000),  # rank 7, file F
            (0x0008_0000_0000_0000, 0x0000_0800_0000_0000),  # rank 7, file E
            (0x0010_0000_0000_0000, 0x0000_1000_0000_0000),  # rank 7, file D
            (0x0020_0000_0000_0000, 0x0000_2000_0000_0000),  # rank 7, file C
            (0x0040_0000_0000_0000, 0x0000_4000_0000_0000),  # rank 7, file B
            (0x0080_0000_0000_0000, 0x0000_8000_0000_0000),  # rank 7, file A
            (0x0100_0000_0000_0000, 0x0001_0000_0000_0000),  # rank 8, file H
            (0x0200_0000_0000_0000, 0x0002_0000_0000_0000),  # rank 8, file G
            (0x0400_0000_0000_0000, 0x0004_0000_0000_0000),  # rank 8, file F
            (0x0800_0000_0000_0000, 0x0008_0000_0000_0000),  # rank 8, file E
            (0x1000_0000_0000_0000, 0x0010_0000_0000_0000),  # rank 8, file D
            (0x2000_0000_0000_0000, 0x0020_0000_0000_0000),  # rank 8, file C
            (0x4000_0000_0000_0000, 0x0040_0000_0000_0000),  # rank 8, file B
            (0x8000_0000_0000_0000, 0x0080_0000_0000_0000),  # rank 8, file A
            (0xFFFF_FFFF_FFFF_FFFF, 0x00FF_FFFF_FFFF_FFFF),  # everything
        ]
        for input_bitboard, output_bitboard in cases:
            self.assertEqual(get_bottom_square(input_bitboard), output_bitboard)


if __name__ == "__main__":
    unittest.main()
