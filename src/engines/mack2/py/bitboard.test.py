from bitboard import (
    get_left_square,
    get_right_square,
    get_top_square,
    get_bottom_square,
    get_moveable_sqares_to_left,
)
import re
import unittest


def string_to_bitboard(string: str) -> int:
    binary = ""
    for line in string.split("\n"):
        binary += line.strip()

    regex = re.compile("^[01]{64}$")
    if not regex.match(binary):
        raise Exception("invalid board string")

    return int(binary, 2)


class TestBitboard(unittest.TestCase):
    def test_string_to_bitboard(self):
        self.assertEqual(
            string_to_bitboard(
                """
                    11111111
                    11111111
                    00000000
                    00000000
                    00000000
                    00000000
                    11111111
                    11111111
                """
            ),
            0b11111111_11111111_00000000_00000000_00000000_00000000_11111111_11111111,
        )
        self.assertEqual(
            string_to_bitboard(
                """
                    10000000
                    01000000
                    00100000
                    00010000
                    00001000
                    00000100
                    00000010
                    00000001
                """
            ),
            0b10000000_01000000_00100000_00010000_00001000_00000100_00000010_00000001,
        )
        self.assertEqual(
            string_to_bitboard(
                """
                    00000000
                    00000000
                    00000000
                    00000000
                    00000000
                    00000000
                    00000000
                    00000000
                """
            ),
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
        )
        self.assertEqual(
            string_to_bitboard(
                """
                    11111111
                    11111111
                    11111111
                    11111111
                    11111111
                    11111111
                    11111111
                    11111111
                """
            ),
            0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111,
        )

    def test_get_left_square(self):
        cases = [
            (0x0000_0000_0000_0000, 0x0000_0000_0000_0000),  # null
            (0x0000_0000_0000_0001, 0x0000_0000_0000_0002),  # rank 1, file H
            (0x0000_0000_0000_0002, 0x0000_0000_0000_0004),  # rank 1, file G
            (0x0000_0000_0000_0004, 0x0000_0000_0000_0008),  # rank 1, file F
            (0x0000_0000_0000_0008, 0x0000_0000_0000_0010),  # rank 1, file E
            (0x0000_0000_0000_0010, 0x0000_0000_0000_0020),  # rank 1, file D
            (0x0000_0000_0000_0020, 0x0000_0000_0000_0040),  # rank 1, file C
            (0x0000_0000_0000_0040, 0x0000_0000_0000_0080),  # rank 1, file B
            (0x0000_0000_0000_0080, 0x0000_0000_0000_0000),  # rank 1, file A
            (0x0000_0000_0000_0100, 0x0000_0000_0000_0200),  # rank 2, file H
            (0x0000_0000_0000_0200, 0x0000_0000_0000_0400),  # rank 2, file G
            (0x0000_0000_0000_0400, 0x0000_0000_0000_0800),  # rank 2, file F
            (0x0000_0000_0000_0800, 0x0000_0000_0000_1000),  # rank 2, file E
            (0x0000_0000_0000_1000, 0x0000_0000_0000_2000),  # rank 2, file D
            (0x0000_0000_0000_2000, 0x0000_0000_0000_4000),  # rank 2, file C
            (0x0000_0000_0000_4000, 0x0000_0000_0000_8000),  # rank 2, file B
            (0x0000_0000_0000_8000, 0x0000_0000_0000_0000),  # rank 2, file A
            (0x0000_0000_0001_0000, 0x0000_0000_0002_0000),  # rank 3, file H
            (0x0000_0000_0002_0000, 0x0000_0000_0004_0000),  # rank 3, file G
            (0x0000_0000_0004_0000, 0x0000_0000_0008_0000),  # rank 3, file F
            (0x0000_0000_0008_0000, 0x0000_0000_0010_0000),  # rank 3, file E
            (0x0000_0000_0010_0000, 0x0000_0000_0020_0000),  # rank 3, file D
            (0x0000_0000_0020_0000, 0x0000_0000_0040_0000),  # rank 3, file C
            (0x0000_0000_0040_0000, 0x0000_0000_0080_0000),  # rank 3, file B
            (0x0000_0000_0080_0000, 0x0000_0000_0000_0000),  # rank 3, file A
            (0x0000_0000_0100_0000, 0x0000_0000_0200_0000),  # rank 4, file H
            (0x0000_0000_0200_0000, 0x0000_0000_0400_0000),  # rank 4, file G
            (0x0000_0000_0400_0000, 0x0000_0000_0800_0000),  # rank 4, file F
            (0x0000_0000_0800_0000, 0x0000_0000_1000_0000),  # rank 4, file E
            (0x0000_0000_1000_0000, 0x0000_0000_2000_0000),  # rank 4, file D
            (0x0000_0000_2000_0000, 0x0000_0000_4000_0000),  # rank 4, file C
            (0x0000_0000_4000_0000, 0x0000_0000_8000_0000),  # rank 4, file B
            (0x0000_0000_8000_0000, 0x0000_0000_0000_0000),  # rank 4, file A
            (0x0000_0001_0000_0000, 0x0000_0002_0000_0000),  # rank 5, file H
            (0x0000_0002_0000_0000, 0x0000_0004_0000_0000),  # rank 5, file G
            (0x0000_0004_0000_0000, 0x0000_0008_0000_0000),  # rank 5, file F
            (0x0000_0008_0000_0000, 0x0000_0010_0000_0000),  # rank 5, file E
            (0x0000_0010_0000_0000, 0x0000_0020_0000_0000),  # rank 5, file D
            (0x0000_0020_0000_0000, 0x0000_0040_0000_0000),  # rank 5, file C
            (0x0000_0040_0000_0000, 0x0000_0080_0000_0000),  # rank 5, file B
            (0x0000_0080_0000_0000, 0x0000_0000_0000_0000),  # rank 5, file A
            (0x0000_0100_0000_0000, 0x0000_0200_0000_0000),  # rank 6, file H
            (0x0000_0200_0000_0000, 0x0000_0400_0000_0000),  # rank 6, file G
            (0x0000_0400_0000_0000, 0x0000_0800_0000_0000),  # rank 6, file F
            (0x0000_0800_0000_0000, 0x0000_1000_0000_0000),  # rank 6, file E
            (0x0000_1000_0000_0000, 0x0000_2000_0000_0000),  # rank 6, file D
            (0x0000_2000_0000_0000, 0x0000_4000_0000_0000),  # rank 6, file C
            (0x0000_4000_0000_0000, 0x0000_8000_0000_0000),  # rank 6, file B
            (0x0000_8000_0000_0000, 0x0000_0000_0000_0000),  # rank 6, file A
            (0x0001_0000_0000_0000, 0x0002_0000_0000_0000),  # rank 7, file H
            (0x0002_0000_0000_0000, 0x0004_0000_0000_0000),  # rank 7, file G
            (0x0004_0000_0000_0000, 0x0008_0000_0000_0000),  # rank 7, file F
            (0x0008_0000_0000_0000, 0x0010_0000_0000_0000),  # rank 7, file E
            (0x0010_0000_0000_0000, 0x0020_0000_0000_0000),  # rank 7, file D
            (0x0020_0000_0000_0000, 0x0040_0000_0000_0000),  # rank 7, file C
            (0x0040_0000_0000_0000, 0x0080_0000_0000_0000),  # rank 7, file B
            (0x0080_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 7, file A
            (0x0100_0000_0000_0000, 0x0200_0000_0000_0000),  # rank 8, file H
            (0x0200_0000_0000_0000, 0x0400_0000_0000_0000),  # rank 8, file G
            (0x0400_0000_0000_0000, 0x0800_0000_0000_0000),  # rank 8, file F
            (0x0800_0000_0000_0000, 0x1000_0000_0000_0000),  # rank 8, file E
            (0x1000_0000_0000_0000, 0x2000_0000_0000_0000),  # rank 8, file D
            (0x2000_0000_0000_0000, 0x4000_0000_0000_0000),  # rank 8, file C
            (0x4000_0000_0000_0000, 0x8000_0000_0000_0000),  # rank 8, file B
            (0x8000_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file A
            (0xFFFF_FFFF_FFFF_FFFF, 0xFEFE_FEFE_FEFE_FEFE),  # everything
        ]
        for input_bitboard, output_bitboard in cases:
            self.assertEqual(get_left_square(input_bitboard), output_bitboard)

    def test_get_right_square(self):
        cases = [
            (0x0000_0000_0000_0000, 0x0000_0000_0000_0000),  # null
            (0x0000_0000_0000_0001, 0x0000_0000_0000_0000),  # rank 1, file H
            (0x0000_0000_0000_0002, 0x0000_0000_0000_0001),  # rank 1, file G
            (0x0000_0000_0000_0004, 0x0000_0000_0000_0002),  # rank 1, file F
            (0x0000_0000_0000_0008, 0x0000_0000_0000_0004),  # rank 1, file E
            (0x0000_0000_0000_0010, 0x0000_0000_0000_0008),  # rank 1, file D
            (0x0000_0000_0000_0020, 0x0000_0000_0000_0010),  # rank 1, file C
            (0x0000_0000_0000_0040, 0x0000_0000_0000_0020),  # rank 1, file B
            (0x0000_0000_0000_0080, 0x0000_0000_0000_0040),  # rank 1, file A
            (0x0000_0000_0000_0100, 0x0000_0000_0000_0000),  # rank 2, file H
            (0x0000_0000_0000_0200, 0x0000_0000_0000_0100),  # rank 2, file G
            (0x0000_0000_0000_0400, 0x0000_0000_0000_0200),  # rank 2, file F
            (0x0000_0000_0000_0800, 0x0000_0000_0000_0400),  # rank 2, file E
            (0x0000_0000_0000_1000, 0x0000_0000_0000_0800),  # rank 2, file D
            (0x0000_0000_0000_2000, 0x0000_0000_0000_1000),  # rank 2, file C
            (0x0000_0000_0000_4000, 0x0000_0000_0000_2000),  # rank 2, file B
            (0x0000_0000_0000_8000, 0x0000_0000_0000_4000),  # rank 2, file A
            (0x0000_0000_0001_0000, 0x0000_0000_0000_0000),  # rank 3, file H
            (0x0000_0000_0002_0000, 0x0000_0000_0001_0000),  # rank 3, file G
            (0x0000_0000_0004_0000, 0x0000_0000_0002_0000),  # rank 3, file F
            (0x0000_0000_0008_0000, 0x0000_0000_0004_0000),  # rank 3, file E
            (0x0000_0000_0010_0000, 0x0000_0000_0008_0000),  # rank 3, file D
            (0x0000_0000_0020_0000, 0x0000_0000_0010_0000),  # rank 3, file C
            (0x0000_0000_0040_0000, 0x0000_0000_0020_0000),  # rank 3, file B
            (0x0000_0000_0080_0000, 0x0000_0000_0040_0000),  # rank 3, file A
            (0x0000_0000_0100_0000, 0x0000_0000_0000_0000),  # rank 4, file H
            (0x0000_0000_0200_0000, 0x0000_0000_0100_0000),  # rank 4, file G
            (0x0000_0000_0400_0000, 0x0000_0000_0200_0000),  # rank 4, file F
            (0x0000_0000_0800_0000, 0x0000_0000_0400_0000),  # rank 4, file E
            (0x0000_0000_1000_0000, 0x0000_0000_0800_0000),  # rank 4, file D
            (0x0000_0000_2000_0000, 0x0000_0000_1000_0000),  # rank 4, file C
            (0x0000_0000_4000_0000, 0x0000_0000_2000_0000),  # rank 4, file B
            (0x0000_0000_8000_0000, 0x0000_0000_4000_0000),  # rank 4, file A
            (0x0000_0001_0000_0000, 0x0000_0000_0000_0000),  # rank 5, file H
            (0x0000_0002_0000_0000, 0x0000_0001_0000_0000),  # rank 5, file G
            (0x0000_0004_0000_0000, 0x0000_0002_0000_0000),  # rank 5, file F
            (0x0000_0008_0000_0000, 0x0000_0004_0000_0000),  # rank 5, file E
            (0x0000_0010_0000_0000, 0x0000_0008_0000_0000),  # rank 5, file D
            (0x0000_0020_0000_0000, 0x0000_0010_0000_0000),  # rank 5, file C
            (0x0000_0040_0000_0000, 0x0000_0020_0000_0000),  # rank 5, file B
            (0x0000_0080_0000_0000, 0x0000_0040_0000_0000),  # rank 5, file A
            (0x0000_0100_0000_0000, 0x0000_0000_0000_0000),  # rank 6, file H
            (0x0000_0200_0000_0000, 0x0000_0100_0000_0000),  # rank 6, file G
            (0x0000_0400_0000_0000, 0x0000_0200_0000_0000),  # rank 6, file F
            (0x0000_0800_0000_0000, 0x0000_0400_0000_0000),  # rank 6, file E
            (0x0000_1000_0000_0000, 0x0000_0800_0000_0000),  # rank 6, file D
            (0x0000_2000_0000_0000, 0x0000_1000_0000_0000),  # rank 6, file C
            (0x0000_4000_0000_0000, 0x0000_2000_0000_0000),  # rank 6, file B
            (0x0000_8000_0000_0000, 0x0000_4000_0000_0000),  # rank 6, file A
            (0x0001_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 7, file H
            (0x0002_0000_0000_0000, 0x0001_0000_0000_0000),  # rank 7, file G
            (0x0004_0000_0000_0000, 0x0002_0000_0000_0000),  # rank 7, file F
            (0x0008_0000_0000_0000, 0x0004_0000_0000_0000),  # rank 7, file E
            (0x0010_0000_0000_0000, 0x0008_0000_0000_0000),  # rank 7, file D
            (0x0020_0000_0000_0000, 0x0010_0000_0000_0000),  # rank 7, file C
            (0x0040_0000_0000_0000, 0x0020_0000_0000_0000),  # rank 7, file B
            (0x0080_0000_0000_0000, 0x0040_0000_0000_0000),  # rank 7, file A
            (0x0100_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file H
            (0x0200_0000_0000_0000, 0x0100_0000_0000_0000),  # rank 8, file G
            (0x0400_0000_0000_0000, 0x0200_0000_0000_0000),  # rank 8, file F
            (0x0800_0000_0000_0000, 0x0400_0000_0000_0000),  # rank 8, file E
            (0x1000_0000_0000_0000, 0x0800_0000_0000_0000),  # rank 8, file D
            (0x2000_0000_0000_0000, 0x1000_0000_0000_0000),  # rank 8, file C
            (0x4000_0000_0000_0000, 0x2000_0000_0000_0000),  # rank 8, file B
            (0x8000_0000_0000_0000, 0x4000_0000_0000_0000),  # rank 8, file A
            (0xFFFF_FFFF_FFFF_FFFF, 0x7F7F_7F7F_7F7F_7F7F),  # everything
        ]
        for input_bitboard, output_bitboard in cases:
            self.assertEqual(get_right_square(input_bitboard), output_bitboard)

    def test_get_top_square(self):
        cases = [
            (0x0000_0000_0000_0000, 0x0000_0000_0000_0000),  # null
            (0x0000_0000_0000_0001, 0x0000_0000_0000_0100),  # rank 1, file H
            (0x0000_0000_0000_0002, 0x0000_0000_0000_0200),  # rank 1, file G
            (0x0000_0000_0000_0004, 0x0000_0000_0000_0400),  # rank 1, file F
            (0x0000_0000_0000_0008, 0x0000_0000_0000_0800),  # rank 1, file E
            (0x0000_0000_0000_0010, 0x0000_0000_0000_1000),  # rank 1, file D
            (0x0000_0000_0000_0020, 0x0000_0000_0000_2000),  # rank 1, file C
            (0x0000_0000_0000_0040, 0x0000_0000_0000_4000),  # rank 1, file B
            (0x0000_0000_0000_0080, 0x0000_0000_0000_8000),  # rank 1, file A
            (0x0000_0000_0000_0100, 0x0000_0000_0001_0000),  # rank 2, file H
            (0x0000_0000_0000_0200, 0x0000_0000_0002_0000),  # rank 2, file G
            (0x0000_0000_0000_0400, 0x0000_0000_0004_0000),  # rank 2, file F
            (0x0000_0000_0000_0800, 0x0000_0000_0008_0000),  # rank 2, file E
            (0x0000_0000_0000_1000, 0x0000_0000_0010_0000),  # rank 2, file D
            (0x0000_0000_0000_2000, 0x0000_0000_0020_0000),  # rank 2, file C
            (0x0000_0000_0000_4000, 0x0000_0000_0040_0000),  # rank 2, file B
            (0x0000_0000_0000_8000, 0x0000_0000_0080_0000),  # rank 2, file A
            (0x0000_0000_0001_0000, 0x0000_0000_0100_0000),  # rank 3, file H
            (0x0000_0000_0002_0000, 0x0000_0000_0200_0000),  # rank 3, file G
            (0x0000_0000_0004_0000, 0x0000_0000_0400_0000),  # rank 3, file F
            (0x0000_0000_0008_0000, 0x0000_0000_0800_0000),  # rank 3, file E
            (0x0000_0000_0010_0000, 0x0000_0000_1000_0000),  # rank 3, file D
            (0x0000_0000_0020_0000, 0x0000_0000_2000_0000),  # rank 3, file C
            (0x0000_0000_0040_0000, 0x0000_0000_4000_0000),  # rank 3, file B
            (0x0000_0000_0080_0000, 0x0000_0000_8000_0000),  # rank 3, file A
            (0x0000_0000_0100_0000, 0x0000_0001_0000_0000),  # rank 4, file H
            (0x0000_0000_0200_0000, 0x0000_0002_0000_0000),  # rank 4, file G
            (0x0000_0000_0400_0000, 0x0000_0004_0000_0000),  # rank 4, file F
            (0x0000_0000_0800_0000, 0x0000_0008_0000_0000),  # rank 4, file E
            (0x0000_0000_1000_0000, 0x0000_0010_0000_0000),  # rank 4, file D
            (0x0000_0000_2000_0000, 0x0000_0020_0000_0000),  # rank 4, file C
            (0x0000_0000_4000_0000, 0x0000_0040_0000_0000),  # rank 4, file B
            (0x0000_0000_8000_0000, 0x0000_0080_0000_0000),  # rank 4, file A
            (0x0000_0001_0000_0000, 0x0000_0100_0000_0000),  # rank 5, file H
            (0x0000_0002_0000_0000, 0x0000_0200_0000_0000),  # rank 5, file G
            (0x0000_0004_0000_0000, 0x0000_0400_0000_0000),  # rank 5, file F
            (0x0000_0008_0000_0000, 0x0000_0800_0000_0000),  # rank 5, file E
            (0x0000_0010_0000_0000, 0x0000_1000_0000_0000),  # rank 5, file D
            (0x0000_0020_0000_0000, 0x0000_2000_0000_0000),  # rank 5, file C
            (0x0000_0040_0000_0000, 0x0000_4000_0000_0000),  # rank 5, file B
            (0x0000_0080_0000_0000, 0x0000_8000_0000_0000),  # rank 5, file A
            (0x0000_0100_0000_0000, 0x0001_0000_0000_0000),  # rank 6, file H
            (0x0000_0200_0000_0000, 0x0002_0000_0000_0000),  # rank 6, file G
            (0x0000_0400_0000_0000, 0x0004_0000_0000_0000),  # rank 6, file F
            (0x0000_0800_0000_0000, 0x0008_0000_0000_0000),  # rank 6, file E
            (0x0000_1000_0000_0000, 0x0010_0000_0000_0000),  # rank 6, file D
            (0x0000_2000_0000_0000, 0x0020_0000_0000_0000),  # rank 6, file C
            (0x0000_4000_0000_0000, 0x0040_0000_0000_0000),  # rank 6, file B
            (0x0000_8000_0000_0000, 0x0080_0000_0000_0000),  # rank 6, file A
            (0x0001_0000_0000_0000, 0x0100_0000_0000_0000),  # rank 7, file H
            (0x0002_0000_0000_0000, 0x0200_0000_0000_0000),  # rank 7, file G
            (0x0004_0000_0000_0000, 0x0400_0000_0000_0000),  # rank 7, file F
            (0x0008_0000_0000_0000, 0x0800_0000_0000_0000),  # rank 7, file E
            (0x0010_0000_0000_0000, 0x1000_0000_0000_0000),  # rank 7, file D
            (0x0020_0000_0000_0000, 0x2000_0000_0000_0000),  # rank 7, file C
            (0x0040_0000_0000_0000, 0x4000_0000_0000_0000),  # rank 7, file B
            (0x0080_0000_0000_0000, 0x8000_0000_0000_0000),  # rank 7, file A
            (0x0100_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file H
            (0x0200_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file G
            (0x0400_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file F
            (0x0800_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file E
            (0x1000_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file D
            (0x2000_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file C
            (0x4000_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file B
            (0x8000_0000_0000_0000, 0x0000_0000_0000_0000),  # rank 8, file A
            (0xFFFF_FFFF_FFFF_FFFF, 0xFFFF_FFFF_FFFF_FF00),  # everything
        ]
        for input_bitboard, output_bitboard in cases:
            self.assertEqual(get_top_square(input_bitboard), output_bitboard)

    def test_get_bottom_square(self):
        cases = [
            (0x0000_0000_0000_0000, 0x0000_0000_0000_0000),  # null
            (0x0000_0000_0000_0001, 0x0000_0000_0000_0000),  # rank 1, file H
            (0x0000_0000_0000_0002, 0x0000_0000_0000_0000),  # rank 1, file G
            (0x0000_0000_0000_0004, 0x0000_0000_0000_0000),  # rank 1, file F
            (0x0000_0000_0000_0008, 0x0000_0000_0000_0000),  # rank 1, file E
            (0x0000_0000_0000_0010, 0x0000_0000_0000_0000),  # rank 1, file D
            (0x0000_0000_0000_0020, 0x0000_0000_0000_0000),  # rank 1, file C
            (0x0000_0000_0000_0040, 0x0000_0000_0000_0000),  # rank 1, file B
            (0x0000_0000_0000_0080, 0x0000_0000_0000_0000),  # rank 1, file A
            (0x0000_0000_0000_0100, 0x0000_0000_0000_0001),  # rank 2, file H
            (0x0000_0000_0000_0200, 0x0000_0000_0000_0002),  # rank 2, file G
            (0x0000_0000_0000_0400, 0x0000_0000_0000_0004),  # rank 2, file F
            (0x0000_0000_0000_0800, 0x0000_0000_0000_0008),  # rank 2, file E
            (0x0000_0000_0000_1000, 0x0000_0000_0000_0010),  # rank 2, file D
            (0x0000_0000_0000_2000, 0x0000_0000_0000_0020),  # rank 2, file C
            (0x0000_0000_0000_4000, 0x0000_0000_0000_0040),  # rank 2, file B
            (0x0000_0000_0000_8000, 0x0000_0000_0000_0080),  # rank 2, file A
            (0x0000_0000_0001_0000, 0x0000_0000_0000_0100),  # rank 3, file H
            (0x0000_0000_0002_0000, 0x0000_0000_0000_0200),  # rank 3, file G
            (0x0000_0000_0004_0000, 0x0000_0000_0000_0400),  # rank 3, file F
            (0x0000_0000_0008_0000, 0x0000_0000_0000_0800),  # rank 3, file E
            (0x0000_0000_0010_0000, 0x0000_0000_0000_1000),  # rank 3, file D
            (0x0000_0000_0020_0000, 0x0000_0000_0000_2000),  # rank 3, file C
            (0x0000_0000_0040_0000, 0x0000_0000_0000_4000),  # rank 3, file B
            (0x0000_0000_0080_0000, 0x0000_0000_0000_8000),  # rank 3, file A
            (0x0000_0000_0100_0000, 0x0000_0000_0001_0000),  # rank 4, file H
            (0x0000_0000_0200_0000, 0x0000_0000_0002_0000),  # rank 4, file G
            (0x0000_0000_0400_0000, 0x0000_0000_0004_0000),  # rank 4, file F
            (0x0000_0000_0800_0000, 0x0000_0000_0008_0000),  # rank 4, file E
            (0x0000_0000_1000_0000, 0x0000_0000_0010_0000),  # rank 4, file D
            (0x0000_0000_2000_0000, 0x0000_0000_0020_0000),  # rank 4, file C
            (0x0000_0000_4000_0000, 0x0000_0000_0040_0000),  # rank 4, file B
            (0x0000_0000_8000_0000, 0x0000_0000_0080_0000),  # rank 4, file A
            (0x0000_0001_0000_0000, 0x0000_0000_0100_0000),  # rank 5, file H
            (0x0000_0002_0000_0000, 0x0000_0000_0200_0000),  # rank 5, file G
            (0x0000_0004_0000_0000, 0x0000_0000_0400_0000),  # rank 5, file F
            (0x0000_0008_0000_0000, 0x0000_0000_0800_0000),  # rank 5, file E
            (0x0000_0010_0000_0000, 0x0000_0000_1000_0000),  # rank 5, file D
            (0x0000_0020_0000_0000, 0x0000_0000_2000_0000),  # rank 5, file C
            (0x0000_0040_0000_0000, 0x0000_0000_4000_0000),  # rank 5, file B
            (0x0000_0080_0000_0000, 0x0000_0000_8000_0000),  # rank 5, file A
            (0x0000_0100_0000_0000, 0x0000_0001_0000_0000),  # rank 6, file H
            (0x0000_0200_0000_0000, 0x0000_0002_0000_0000),  # rank 6, file G
            (0x0000_0400_0000_0000, 0x0000_0004_0000_0000),  # rank 6, file F
            (0x0000_0800_0000_0000, 0x0000_0008_0000_0000),  # rank 6, file E
            (0x0000_1000_0000_0000, 0x0000_0010_0000_0000),  # rank 6, file D
            (0x0000_2000_0000_0000, 0x0000_0020_0000_0000),  # rank 6, file C
            (0x0000_4000_0000_0000, 0x0000_0040_0000_0000),  # rank 6, file B
            (0x0000_8000_0000_0000, 0x0000_0080_0000_0000),  # rank 6, file A
            (0x0001_0000_0000_0000, 0x0000_0100_0000_0000),  # rank 7, file H
            (0x0002_0000_0000_0000, 0x0000_0200_0000_0000),  # rank 7, file G
            (0x0004_0000_0000_0000, 0x0000_0400_0000_0000),  # rank 7, file F
            (0x0008_0000_0000_0000, 0x0000_0800_0000_0000),  # rank 7, file E
            (0x0010_0000_0000_0000, 0x0000_1000_0000_0000),  # rank 7, file D
            (0x0020_0000_0000_0000, 0x0000_2000_0000_0000),  # rank 7, file C
            (0x0040_0000_0000_0000, 0x0000_4000_0000_0000),  # rank 7, file B
            (0x0080_0000_0000_0000, 0x0000_8000_0000_0000),  # rank 7, file A
            (0x0100_0000_0000_0000, 0x0001_0000_0000_0000),  # rank 8, file H
            (0x0200_0000_0000_0000, 0x0002_0000_0000_0000),  # rank 8, file G
            (0x0400_0000_0000_0000, 0x0004_0000_0000_0000),  # rank 8, file F
            (0x0800_0000_0000_0000, 0x0008_0000_0000_0000),  # rank 8, file E
            (0x1000_0000_0000_0000, 0x0010_0000_0000_0000),  # rank 8, file D
            (0x2000_0000_0000_0000, 0x0020_0000_0000_0000),  # rank 8, file C
            (0x4000_0000_0000_0000, 0x0040_0000_0000_0000),  # rank 8, file B
            (0x8000_0000_0000_0000, 0x0080_0000_0000_0000),  # rank 8, file A
            (0xFFFF_FFFF_FFFF_FFFF, 0x00FF_FFFF_FFFF_FFFF),  # everything
        ]
        for input_bitboard, output_bitboard in cases:
            self.assertEqual(get_bottom_square(input_bitboard), output_bitboard)

    def test_get_moveable_sqares_to_left(self):
        # when there are no pieces to the left -> should observe all squares
        self.assertEqual(
            get_moveable_sqares_to_left(
                string_to_bitboard(
                    """
                        00000001
                        00000010
                        00000100
                        00001000
                        00010000
                        00100000
                        01000000
                        10000000
                    """
                ),
                string_to_bitboard(
                    """
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                    """
                ),
                string_to_bitboard(
                    """
                        00000001
                        00000010
                        00000100
                        00001000
                        00010000
                        00100000
                        01000000
                        10000000
                    """
                ),
            ),
            string_to_bitboard(
                """
                    11111111
                    11111110
                    11111100
                    11111000
                    11110000
                    11100000
                    11000000
                    10000000
                """
            ),
        )
        # when there is one own piece to the left -> should observe all squares up to the own piece
        self.assertEqual(
            get_moveable_sqares_to_left(
                string_to_bitboard(
                    """
                        01000001
                        01000010
                        00100100
                        00101000
                        01010000
                        01100000
                        11000000
                        10000000
                    """
                ),
                string_to_bitboard(
                    """
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                    """
                ),
                string_to_bitboard(
                    """
                        00000001
                        00000010
                        00000100
                        00001000
                        00010000
                        00100000
                        01000000
                        10000000
                    """
                ),
            ),
            string_to_bitboard(
                """
                    00111111
                    00111110
                    00011100
                    00011000
                    00110000
                    00100000
                    01000000
                    10000000
                """
            ),
        )
        # when there are multiple own piece to the left -> should observe all squares up to the first own piece
        self.assertEqual(
            get_moveable_sqares_to_left(
                string_to_bitboard(
                    """
                        01001001
                        01001010
                        00101100
                        00111000
                        11010000
                        11100000
                        11000000
                        10000000
                    """
                ),
                string_to_bitboard(
                    """
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                        00000000
                    """
                ),
                string_to_bitboard(
                    """
                        00000001
                        00000010
                        00000100
                        00001000
                        00010000
                        00100000
                        01000000
                        10000000
                    """
                ),
            ),
            string_to_bitboard(
                """
                    00000111
                    00000110
                    00000100
                    00001000
                    00110000
                    00100000
                    01000000
                    10000000
                """
            ),
        )
        # when there is one enemy piece to the left -> should observe all squares up to and including the enemy piece
        self.assertEqual(
            get_moveable_sqares_to_left(
                string_to_bitboard(
                    """
                        01000001
                        01000010
                        00100100
                        00101000
                        01010000
                        01100000
                        11000000
                        10000000
                    """
                ),
                string_to_bitboard(
                    """
                        01000000
                        01000000
                        00100000
                        00100000
                        01000000
                        01000000
                        10000000
                        00000000
                    """
                ),
                string_to_bitboard(
                    """
                        00000001
                        00000010
                        00000100
                        00001000
                        00010000
                        00100000
                        01000000
                        10000000
                    """
                ),
            ),
            string_to_bitboard(
                """
                    01111111
                    01111110
                    00111100
                    00111000
                    01110000
                    01100000
                    11000000
                    10000000
                """
            ),
        )
        # when there are multiple enemy piece to the left -> should observe all squares up to and including the first enemy piece
        self.assertEqual(
            get_moveable_sqares_to_left(
                string_to_bitboard(
                    """
                        01001001
                        01001010
                        00101100
                        00111000
                        11010000
                        11100000
                        11000000
                        10000000
                    """
                ),
                string_to_bitboard(
                    """
                        01001000
                        01001000
                        00101000
                        00110000
                        11000000
                        11000000
                        10000000
                        00000000
                    """
                ),
                string_to_bitboard(
                    """
                        00000001
                        00000010
                        00000100
                        00001000
                        00010000
                        00100000
                        01000000
                        10000000
                    """
                ),
            ),
            string_to_bitboard(
                """
                    00001111
                    00001110
                    00001100
                    00011000
                    01110000
                    01100000
                    11000000
                    10000000
                """
            ),
        )
        # when there are own and enemy piece to the left -> should observe all squares up to the first own piece
        self.assertEqual(
            get_moveable_sqares_to_left(
                string_to_bitboard(
                    """
                        01001001
                        01001010
                        00101100
                        00111000
                        11010000
                        11100000
                        11000000
                        10000000
                    """
                ),
                string_to_bitboard(
                    """
                        01000000
                        01000000
                        00100000
                        00100000
                        10000000
                        10000000
                        00000000
                        00000000
                    """
                ),
                string_to_bitboard(
                    """
                        00000001
                        00000010
                        00000100
                        00001000
                        00010000
                        00100000
                        01000000
                        10000000
                    """
                ),
            ),
            string_to_bitboard(
                """
                    00000111
                    00000110
                    00000100
                    00001000
                    00110000
                    00100000
                    01000000
                    10000000
                """
            ),
        )
        # when there are own and enemy piece to the left -> should observe all squares up to and including the first enemy piece
        self.assertEqual(
            get_moveable_sqares_to_left(
                string_to_bitboard(
                    """
                        01001001
                        01001010
                        00101100
                        00111000
                        11010000
                        11100000
                        11000000
                        10000000
                    """
                ),
                string_to_bitboard(
                    """
                        00001000
                        00001000
                        00001000
                        00010000
                        01000000
                        01000000
                        10000000
                        00000000
                    """
                ),
                string_to_bitboard(
                    """
                        00000001
                        00000010
                        00000100
                        00001000
                        00010000
                        00100000
                        01000000
                        10000000
                    """
                ),
            ),
            string_to_bitboard(
                """
                    00001111
                    00001110
                    00001100
                    00011000
                    01110000
                    01100000
                    11000000
                    10000000
                """
            ),
        )


if __name__ == "__main__":
    unittest.main()

# // TODO: migrate these tests
# describe("getMoveableSqaresToRight", () => {
#   describe("when there are no pieces to the right", () => {
#     it("should observe all squares", () => {
#       self.assertEqual(
#         getMoveableSqaresToRight(
#           string_to_bitboard(`
#             00010000
#             00100000
#             01000000
#             10000000
#             00000001
#             00000010
#             00000100
#             00001000
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00010000
#             00100000
#             01000000
#             10000000
#             00000001
#             00000010
#             00000100
#             00001000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           00011111
#           00111111
#           01111111
#           11111111
#           00000001
#           00000011
#           00000111
#           00001111
#         `)
#       );
#     });
#   });
#   describe("when there is one own piece to the right", () => {
#     it("should observe all squares up to the own piece", () => {
#       self.assertEqual(
#         getMoveableSqaresToRight(
#           string_to_bitboard(`
#             00010100
#             00100100
#             01000010
#             10000010
#             00000001
#             00000011
#             00000110
#             00001010
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00010000
#             00100000
#             01000000
#             10000000
#             00000001
#             00000010
#             00000100
#             00001000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#         00011000
#         00111000
#         01111100
#         11111100
#         00000001
#         00000010
#         00000100
#         00001100
#         `)
#       );
#     });
#   });
#   describe("when there are multiple own piece to the right", () => {
#     it("should observe all squares up to the first own piece", () => {
#       expect(
#         getMoveableSqaresToRight(
#           string_to_bitboard(`
#             00011100
#             00110100
#             01010010
#             10010010
#             00000001
#             00000011
#             00000111
#             00001011
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00010000
#             00100000
#             01000000
#             10000000
#             00000001
#             00000010
#             00000100
#             00001000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           00010000
#           00100000
#           01100000
#           11100000
#           00000001
#           00000010
#           00000100
#           00001100
#         `)
#       );
#     });
#   });
#   describe("when there is one enemy piece to the right", () => {
#     it("should observe all squares up to and including the enemy piece", () => {
#       expect(
#         getMoveableSqaresToRight(
#           string_to_bitboard(`
#             00010100
#             00100100
#             01000010
#             10000010
#             00000001
#             00000011
#             00000110
#             00001010
#           `),
#           string_to_bitboard(`
#             00000100
#             00000100
#             00000010
#             00000010
#             00000000
#             00000001
#             00000010
#             00000010
#           `),
#           string_to_bitboard(`
#             00010000
#             00100000
#             01000000
#             10000000
#             00000001
#             00000010
#             00000100
#             00001000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           00011100
#           00111100
#           01111110
#           11111110
#           00000001
#           00000011
#           00000110
#           00001110
#         `)
#       );
#     });
#   });
#   describe("when there are multiple enemy piece to the right", () => {
#     it("should observe all squares up to and including the first enemy piece", () => {
#       expect(
#         getMoveableSqaresToRight(
#           string_to_bitboard(`
#             00011100
#             00110100
#             01010010
#             10010010
#             00000001
#             00000011
#             00000111
#             00001011
#           `),
#           string_to_bitboard(`
#             00001100
#             00010100
#             00010010
#             00010010
#             00000000
#             00000001
#             00000011
#             00000011
#           `),
#           string_to_bitboard(`
#             00010000
#             00100000
#             01000000
#             10000000
#             00000001
#             00000010
#             00000100
#             00001000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           00011000
#           00110000
#           01110000
#           11110000
#           00000001
#           00000011
#           00000110
#           00001110
#         `)
#       );
#     });
#   });
#   describe("when there are own and enemy piece to the right", () => {
#     it("should observe all squares up to the first own piece", () => {
#       expect(
#         getMoveableSqaresToRight(
#           string_to_bitboard(`
#             00011100
#             00110100
#             01010010
#             10010010
#             00000001
#             00000011
#             00000111
#             00001011
#           `),
#           string_to_bitboard(`
#             00000100
#             00000100
#             00000010
#             00000010
#             00000000
#             00000000
#             00000001
#             00000001
#           `),
#           string_to_bitboard(`
#             00010000
#             00100000
#             01000000
#             10000000
#             00000001
#             00000010
#             00000100
#             00001000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           00010000
#           00100000
#           01100000
#           11100000
#           00000001
#           00000010
#           00000100
#           00001100
#         `)
#       );
#     });
#     it("should observe all squares up to and including the first enemy piece", () => {
#       expect(
#         getMoveableSqaresToRight(
#           string_to_bitboard(`
#             00011100
#             00110100
#             01010010
#             10010010
#             00000001
#             00000011
#             00000111
#             00001011
#           `),
#           string_to_bitboard(`
#             00001000
#             00010000
#             00010000
#             00010000
#             00000000
#             00000001
#             00000010
#             00000010
#           `),
#           string_to_bitboard(`
#             00010000
#             00100000
#             01000000
#             10000000
#             00000001
#             00000010
#             00000100
#             00001000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           00011000
#           00110000
#           01110000
#           11110000
#           00000001
#           00000011
#           00000110
#           00001110
#         `)
#       );
#     });
#   });
# });

# describe("getMoveableSqaresToTop", () => {
#   describe("when there are no pieces to the top", () => {
#     it("should observe all squares", () => {
#       expect(
#         getMoveableSqaresToTop(
#           string_to_bitboard(`
#             00000001
#             00000010
#             00000100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00000001
#             00000010
#             00000100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           11111111
#           11111110
#           11111100
#           11111000
#           11110000
#           11100000
#           11000000
#           10000000
#         `)
#       );
#     });
#   });
#   describe("when there is one own piece to the top", () => {
#     it("should observe all squares up to the own piece", () => {
#       expect(
#         getMoveableSqaresToTop(
#           string_to_bitboard(`
#             00000011
#             11001110
#             00110100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00000001
#             00000010
#             00000100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           00000001
#           00000010
#           11001100
#           11111000
#           11110000
#           11100000
#           11000000
#           10000000
#         `)
#       );
#     });
#   });
#   describe("when there are multiple own piece to the top", () => {
#     it("should observe all squares up to the first own piece", () => {
#       expect(
#         getMoveableSqaresToTop(
#           string_to_bitboard(`
#             00001111
#             11001110
#             00110100
#             00011000
#             11110000
#             00100000
#             01000000
#             10000000
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00000001
#             00000010
#             00000100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           00000001
#           00000010
#           00001100
#           00001000
#           00010000
#           11100000
#           11000000
#           10000000
#         `)
#       );
#     });
#   });
#   describe("when there is one enemy piece to the top", () => {
#     it("should observe all squares up to and including the enemy piece", () => {
#       expect(
#         getMoveableSqaresToTop(
#           string_to_bitboard(`
#             00000011
#             11001110
#             00110100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `),
#           string_to_bitboard(`
#             00000010
#             11001100
#             00110000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00000001
#             00000010
#             00000100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#         00000011
#         11001110
#         11111100
#         11111000
#         11110000
#         11100000
#         11000000
#         10000000
#         `)
#       );
#     });
#   });
#   describe("when there are multiple enemy piece to the top", () => {
#     it("should observe all squares up to and including the first enemy piece", () => {
#       expect(
#         getMoveableSqaresToTop(
#           string_to_bitboard(`
#             00001111
#             11001110
#             00110100
#             00011000
#             11110000
#             00100000
#             01000000
#             10000000
#           `),
#           string_to_bitboard(`
#             00001110
#             11001100
#             00110000
#             00010000
#             11100000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00000001
#             00000010
#             00000100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           00000011
#           00001110
#           00001100
#           00011000
#           11110000
#           11100000
#           11000000
#           10000000
#         `)
#       );
#     });
#   });
#   describe("when there are own and enemy piece to the top", () => {
#     it("should observe all squares up to the first own piece", () => {
#       expect(
#         getMoveableSqaresToTop(
#           string_to_bitboard(`
#             00001111
#             11001110
#             00110100
#             00011000
#             11110000
#             00100000
#             01000000
#             10000000
#           `),
#           string_to_bitboard(`
#             00001100
#             11000000
#             00110000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00000001
#             00000010
#             00000100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           00000001
#           00000010
#           00001100
#           00001000
#           00010000
#           11100000
#           11000000
#           10000000
#         `)
#       );
#     });
#     it("should observe all squares up to and including the first enemy piece", () => {
#       expect(
#         getMoveableSqaresToTop(
#           string_to_bitboard(`
#             00001111
#             11001110
#             00110100
#             00011000
#             11110000
#             00100000
#             01000000
#             10000000
#           `),
#           string_to_bitboard(`
#             00000010
#             00001100
#             00000000
#             00010000
#             11100000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00000001
#             00000010
#             00000100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           00000011
#           00001110
#           00001100
#           00011000
#           11110000
#           11100000
#           11000000
#           10000000
#         `)
#       );
#     });
#   });
# });

# describe("getMoveableSqaresToBottom", () => {
#   describe("when there are no pieces to the bottom", () => {
#     it("should observe all squares", () => {
#       expect(
#         getMoveableSqaresToBottom(
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             00010000
#             00001000
#             00000100
#             00000010
#             00000001
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             00010000
#             00001000
#             00000100
#             00000010
#             00000001
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#         10000000
#         11000000
#         11100000
#         11110000
#         11111000
#         11111100
#         11111110
#         11111111
#         `)
#       );
#     });
#   });
#   describe("when there is one own piece to the bottom", () => {
#     it("should observe all squares up to the own piece", () => {
#       expect(
#         getMoveableSqaresToBottom(
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             00010000
#             00001000
#             00110100
#             11001110
#             00000011
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             00010000
#             00001000
#             00000100
#             00000010
#             00000001
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           10000000
#           11000000
#           11100000
#           11110000
#           11111000
#           11001100
#           00000010
#           00000001
#         `)
#       );
#     });
#   });
#   describe("when there are multiple own piece to the bottom", () => {
#     it("should observe all squares up to the first own piece", () => {
#       expect(
#         getMoveableSqaresToBottom(
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             11110000
#             00011000
#             00110100
#             11001110
#             00001111
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             00010000
#             00001000
#             00000100
#             00000010
#             00000001
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           10000000
#           11000000
#           11100000
#           00010000
#           00001000
#           00001100
#           00000010
#           00000001
#         `)
#       );
#     });
#   });
#   describe("when there is one enemy piece to the bottom", () => {
#     it("should observe all squares up to and including the enemy piece", () => {
#       expect(
#         getMoveableSqaresToBottom(
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             00010000
#             00001000
#             00110100
#             11001110
#             00000011
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00110000
#             11001100
#             00000010
#           `),
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             00010000
#             00001000
#             00000100
#             00000010
#             00000001
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           10000000
#           11000000
#           11100000
#           11110000
#           11111000
#           11111100
#           11001110
#           00000011
#         `)
#       );
#     });
#   });
#   describe("when there are multiple enemy piece to the bottom", () => {
#     it("should observe all squares up to and including the first enemy piece", () => {
#       expect(
#         getMoveableSqaresToBottom(
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             11110000
#             00011000
#             00110100
#             11001110
#             00001111
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             11100000
#             00010000
#             00110000
#             11001100
#             00001110
#           `),
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             00010000
#             00001000
#             00000100
#             00000010
#             00000001
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           10000000
#           11000000
#           11100000
#           11110000
#           00011000
#           00001100
#           00001110
#           00000011
#         `)
#       );
#     });
#   });
#   describe("when there are own and enemy piece to the bottom", () => {
#     it("should observe all squares up to the first own piece", () => {
#       expect(
#         getMoveableSqaresToBottom(
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             11110000
#             00011000
#             00110100
#             11001110
#             00001111
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00110000
#             11000000
#             00001100
#           `),
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             00010000
#             00001000
#             00000100
#             00000010
#             00000001
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           10000000
#           11000000
#           11100000
#           00010000
#           00001000
#           00001100
#           00000010
#           00000001
#         `)
#       );
#     });
#     it("should observe all squares up to and including the first enemy piece", () => {
#       expect(
#         getMoveableSqaresToBottom(
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             11110000
#             00011000
#             00110100
#             11001110
#             00001111
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             11100000
#             00010000
#             00000000
#             00001100
#             00000010
#           `),
#           string_to_bitboard(`
#             10000000
#             01000000
#             00100000
#             00010000
#             00001000
#             00000100
#             00000010
#             00000001
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           10000000
#           11000000
#           11100000
#           11110000
#           00011000
#           00001100
#           00001110
#           00000011
#         `)
#       );
#     });
#   });
# });

# describe("getMoveableSqaresToTopLeft", () => {
#   describe("when there are no pieces to the top left", () => {
#     it("should observe all squares", () => {
#       expect(
#         getMoveableSqaresToTopLeft(
#           string_to_bitboard(`
#             00000001
#             00000010
#             00000100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00000001
#             00000010
#             00000100
#             00001000
#             00010000
#             00100000
#             01000000
#             10000000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           01010101
#           10101010
#           01010100
#           10101000
#           01010000
#           10100000
#           01000000
#           10000000
#         `)
#       );
#       expect(
#         getMoveableSqaresToTopLeft(
#           string_to_bitboard(`
#             00000001
#             00000011
#             00000110
#             00001100
#             00011000
#             00110000
#             01100000
#             11000000
#           `),
#           string_to_bitboard(`
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#             00000000
#           `),
#           string_to_bitboard(`
#             00000001
#             00000011
#             00000110
#             00001100
#             00011000
#             00110000
#             01100000
#             11000000
#           `)
#         )
#       ).toEqual(
#         string_to_bitboard(`
#           11111111
#           11111111
#           11111110
#           11111100
#           11111000
#           11110000
#           11100000
#           11000000
#         `)
#       );
#     });
#   });
# });
