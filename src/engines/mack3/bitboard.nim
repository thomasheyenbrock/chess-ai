import tables

const SQUARES*: array[0..63, uint64] = [
    0x8000_0000_0000_0000'u64,
    0x4000_0000_0000_0000'u64,
    0x2000_0000_0000_0000'u64,
    0x1000_0000_0000_0000'u64,
    0x0800_0000_0000_0000'u64,
    0x0400_0000_0000_0000'u64,
    0x0200_0000_0000_0000'u64,
    0x0100_0000_0000_0000'u64,
    0x0080_0000_0000_0000'u64,
    0x0040_0000_0000_0000'u64,
    0x0020_0000_0000_0000'u64,
    0x0010_0000_0000_0000'u64,
    0x0008_0000_0000_0000'u64,
    0x0004_0000_0000_0000'u64,
    0x0002_0000_0000_0000'u64,
    0x0001_0000_0000_0000'u64,
    0x0000_8000_0000_0000'u64,
    0x0000_4000_0000_0000'u64,
    0x0000_2000_0000_0000'u64,
    0x0000_1000_0000_0000'u64,
    0x0000_0800_0000_0000'u64,
    0x0000_0400_0000_0000'u64,
    0x0000_0200_0000_0000'u64,
    0x0000_0100_0000_0000'u64,
    0x0000_0080_0000_0000'u64,
    0x0000_0040_0000_0000'u64,
    0x0000_0020_0000_0000'u64,
    0x0000_0010_0000_0000'u64,
    0x0000_0008_0000_0000'u64,
    0x0000_0004_0000_0000'u64,
    0x0000_0002_0000_0000'u64,
    0x0000_0001_0000_0000'u64,
    0x0000_0000_8000_0000'u64,
    0x0000_0000_4000_0000'u64,
    0x0000_0000_2000_0000'u64,
    0x0000_0000_1000_0000'u64,
    0x0000_0000_0800_0000'u64,
    0x0000_0000_0400_0000'u64,
    0x0000_0000_0200_0000'u64,
    0x0000_0000_0100_0000'u64,
    0x0000_0000_0080_0000'u64,
    0x0000_0000_0040_0000'u64,
    0x0000_0000_0020_0000'u64,
    0x0000_0000_0010_0000'u64,
    0x0000_0000_0008_0000'u64,
    0x0000_0000_0004_0000'u64,
    0x0000_0000_0002_0000'u64,
    0x0000_0000_0001_0000'u64,
    0x0000_0000_0000_8000'u64,
    0x0000_0000_0000_4000'u64,
    0x0000_0000_0000_2000'u64,
    0x0000_0000_0000_1000'u64,
    0x0000_0000_0000_0800'u64,
    0x0000_0000_0000_0400'u64,
    0x0000_0000_0000_0200'u64,
    0x0000_0000_0000_0100'u64,
    0x0000_0000_0000_0080'u64,
    0x0000_0000_0000_0040'u64,
    0x0000_0000_0000_0020'u64,
    0x0000_0000_0000_0010'u64,
    0x0000_0000_0000_0008'u64,
    0x0000_0000_0000_0004'u64,
    0x0000_0000_0000_0002'u64,
    0x0000_0000_0000_0001'u64
]

iterator split*(bitboard: uint64): uint64 =
    if bitboard != 0:
        if (bitboard and (bitboard - 1)) == 0:
            # It's a power of two
            yield bitboard
        else:
            var c = 0
            var bb = bitboard
            while bb != 0:
                let bit = bb and 0x0000_0000_0000_0001'u64
                if bit != 0:
                    yield bit shl c
                c += 1
                bb = bb shr 1


proc get_left_square*(bitboard: uint64): uint64 =
    return (bitboard and 0x7F7F_7F7F_7F7F_7F7F'u64) shl 1


proc get_right_square*(bitboard: uint64): uint64 =
    return (bitboard and 0xFEFE_FEFE_FEFE_FEFE'u64) shr 1


proc get_top_square*(bitboard: uint64): uint64 =
    return (bitboard shl 8) and 0xFFFF_FFFF_FFFF_FFFF'u64


proc get_bottom_square*(bitboard: uint64): uint64 =
    return bitboard shr 8
